
stm32f407blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002854  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013f0  080029dc  080029dc  000129dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dcc  08003dcc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dd4  08003dd4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dd4  08003dd4  00013dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dd8  08003dd8  00013dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000074  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000088  20000088  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000665a  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001882  00000000  00000000  000266e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000678  00000000  00000000  00027f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020959  00000000  00000000  000285e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000082ed  00000000  00000000  00048f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3832  00000000  00000000  00051226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 000004a6  00000000  00000000  00114a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000017fc  00000000  00000000  00114f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001166fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080029c4 	.word	0x080029c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080029c4 	.word	0x080029c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram4;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
 80004d8:	615a      	str	r2, [r3, #20]
 80004da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM4 memory initialization sequence
  */
  hsram4.Instance = FSMC_NORSRAM_DEVICE;
 80004dc:	4b27      	ldr	r3, [pc, #156]	; (800057c <MX_FSMC_Init+0xb8>)
 80004de:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80004e2:	601a      	str	r2, [r3, #0]
  hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80004e4:	4b25      	ldr	r3, [pc, #148]	; (800057c <MX_FSMC_Init+0xb8>)
 80004e6:	4a26      	ldr	r2, [pc, #152]	; (8000580 <MX_FSMC_Init+0xbc>)
 80004e8:	605a      	str	r2, [r3, #4]
  /* hsram4.Init */
  hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;
 80004ea:	4b24      	ldr	r3, [pc, #144]	; (800057c <MX_FSMC_Init+0xb8>)
 80004ec:	2206      	movs	r2, #6
 80004ee:	609a      	str	r2, [r3, #8]
  hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80004f0:	4b22      	ldr	r3, [pc, #136]	; (800057c <MX_FSMC_Init+0xb8>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
  hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80004f6:	4b21      	ldr	r3, [pc, #132]	; (800057c <MX_FSMC_Init+0xb8>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80004fc:	4b1f      	ldr	r3, [pc, #124]	; (800057c <MX_FSMC_Init+0xb8>)
 80004fe:	2210      	movs	r2, #16
 8000500:	615a      	str	r2, [r3, #20]
  hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000502:	4b1e      	ldr	r3, [pc, #120]	; (800057c <MX_FSMC_Init+0xb8>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000508:	4b1c      	ldr	r3, [pc, #112]	; (800057c <MX_FSMC_Init+0xb8>)
 800050a:	2200      	movs	r2, #0
 800050c:	61da      	str	r2, [r3, #28]
  hsram4.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800050e:	4b1b      	ldr	r3, [pc, #108]	; (800057c <MX_FSMC_Init+0xb8>)
 8000510:	2200      	movs	r2, #0
 8000512:	621a      	str	r2, [r3, #32]
  hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <MX_FSMC_Init+0xb8>)
 8000516:	2200      	movs	r2, #0
 8000518:	625a      	str	r2, [r3, #36]	; 0x24
  hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <MX_FSMC_Init+0xb8>)
 800051c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000520:	629a      	str	r2, [r3, #40]	; 0x28
  hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <MX_FSMC_Init+0xb8>)
 8000524:	2200      	movs	r2, #0
 8000526:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_FSMC_Init+0xb8>)
 800052a:	2200      	movs	r2, #0
 800052c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <MX_FSMC_Init+0xb8>)
 8000530:	2200      	movs	r2, #0
 8000532:	635a      	str	r2, [r3, #52]	; 0x34
  hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_FSMC_Init+0xb8>)
 8000536:	2200      	movs	r2, #0
 8000538:	639a      	str	r2, [r3, #56]	; 0x38
  hsram4.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <MX_FSMC_Init+0xb8>)
 800053c:	2200      	movs	r2, #0
 800053e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 6;
 8000540:	2306      	movs	r3, #6
 8000542:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000544:	230f      	movs	r3, #15
 8000546:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 6;
 8000548:	2306      	movs	r3, #6
 800054a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000550:	2310      	movs	r3, #16
 8000552:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000554:	2311      	movs	r3, #17
 8000556:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000558:	2300      	movs	r3, #0
 800055a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram4, &Timing, NULL) != HAL_OK)
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	4619      	mov	r1, r3
 8000562:	4806      	ldr	r0, [pc, #24]	; (800057c <MX_FSMC_Init+0xb8>)
 8000564:	f002 f8e2 	bl	800272c <HAL_SRAM_Init>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800056e:	f001 f8b3 	bl	80016d8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000572:	bf00      	nop
 8000574:	3720      	adds	r7, #32
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000030 	.word	0x20000030
 8000580:	a0000104 	.word	0xa0000104

08000584 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <HAL_FSMC_MspInit+0xa8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d141      	bne.n	8000624 <HAL_FSMC_MspInit+0xa0>
    return;
  }
  FSMC_Initialized = 1;
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <HAL_FSMC_MspInit+0xa8>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	4b21      	ldr	r3, [pc, #132]	; (8000630 <HAL_FSMC_MspInit+0xac>)
 80005ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ae:	4a20      	ldr	r2, [pc, #128]	; (8000630 <HAL_FSMC_MspInit+0xac>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6393      	str	r3, [r2, #56]	; 0x38
 80005b6:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <HAL_FSMC_MspInit+0xac>)
 80005b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 80005c2:	f241 0301 	movw	r3, #4097	; 0x1001
 80005c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c8:	2302      	movs	r3, #2
 80005ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005d0:	2303      	movs	r3, #3
 80005d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80005d4:	230c      	movs	r3, #12
 80005d6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4619      	mov	r1, r3
 80005dc:	4815      	ldr	r0, [pc, #84]	; (8000634 <HAL_FSMC_MspInit+0xb0>)
 80005de:	f001 fa8b 	bl	8001af8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80005e2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80005e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e8:	2302      	movs	r3, #2
 80005ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f0:	2303      	movs	r3, #3
 80005f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80005f4:	230c      	movs	r3, #12
 80005f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4619      	mov	r1, r3
 80005fc:	480e      	ldr	r0, [pc, #56]	; (8000638 <HAL_FSMC_MspInit+0xb4>)
 80005fe:	f001 fa7b 	bl	8001af8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000602:	f24c 7333 	movw	r3, #50995	; 0xc733
 8000606:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000608:	2302      	movs	r3, #2
 800060a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000610:	2303      	movs	r3, #3
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000614:	230c      	movs	r3, #12
 8000616:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <HAL_FSMC_MspInit+0xb8>)
 800061e:	f001 fa6b 	bl	8001af8 <HAL_GPIO_Init>
 8000622:	e000      	b.n	8000626 <HAL_FSMC_MspInit+0xa2>
    return;
 8000624:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000080 	.word	0x20000080
 8000630:	40023800 	.word	0x40023800
 8000634:	40021800 	.word	0x40021800
 8000638:	40021000 	.word	0x40021000
 800063c:	40020c00 	.word	0x40020c00

08000640 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000648:	f7ff ff9c 	bl	8000584 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08c      	sub	sp, #48	; 0x30
 8000658:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
 800066e:	4b51      	ldr	r3, [pc, #324]	; (80007b4 <MX_GPIO_Init+0x160>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a50      	ldr	r2, [pc, #320]	; (80007b4 <MX_GPIO_Init+0x160>)
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b4e      	ldr	r3, [pc, #312]	; (80007b4 <MX_GPIO_Init+0x160>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	61bb      	str	r3, [r7, #24]
 8000684:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
 800068a:	4b4a      	ldr	r3, [pc, #296]	; (80007b4 <MX_GPIO_Init+0x160>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a49      	ldr	r2, [pc, #292]	; (80007b4 <MX_GPIO_Init+0x160>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b47      	ldr	r3, [pc, #284]	; (80007b4 <MX_GPIO_Init+0x160>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	4b43      	ldr	r3, [pc, #268]	; (80007b4 <MX_GPIO_Init+0x160>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a42      	ldr	r2, [pc, #264]	; (80007b4 <MX_GPIO_Init+0x160>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b40      	ldr	r3, [pc, #256]	; (80007b4 <MX_GPIO_Init+0x160>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b3c      	ldr	r3, [pc, #240]	; (80007b4 <MX_GPIO_Init+0x160>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a3b      	ldr	r2, [pc, #236]	; (80007b4 <MX_GPIO_Init+0x160>)
 80006c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b39      	ldr	r3, [pc, #228]	; (80007b4 <MX_GPIO_Init+0x160>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b35      	ldr	r3, [pc, #212]	; (80007b4 <MX_GPIO_Init+0x160>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a34      	ldr	r2, [pc, #208]	; (80007b4 <MX_GPIO_Init+0x160>)
 80006e4:	f043 0310 	orr.w	r3, r3, #16
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b32      	ldr	r3, [pc, #200]	; (80007b4 <MX_GPIO_Init+0x160>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0310 	and.w	r3, r3, #16
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <MX_GPIO_Init+0x160>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a2d      	ldr	r2, [pc, #180]	; (80007b4 <MX_GPIO_Init+0x160>)
 8000700:	f043 0308 	orr.w	r3, r3, #8
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <MX_GPIO_Init+0x160>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <MX_GPIO_Init+0x160>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a26      	ldr	r2, [pc, #152]	; (80007b4 <MX_GPIO_Init+0x160>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <MX_GPIO_Init+0x160>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2101      	movs	r1, #1
 8000732:	4821      	ldr	r0, [pc, #132]	; (80007b8 <MX_GPIO_Init+0x164>)
 8000734:	f001 fb7c 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2120      	movs	r1, #32
 800073c:	481e      	ldr	r0, [pc, #120]	; (80007b8 <MX_GPIO_Init+0x164>)
 800073e:	f001 fb77 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	2101      	movs	r1, #1
 8000746:	481d      	ldr	r0, [pc, #116]	; (80007bc <MX_GPIO_Init+0x168>)
 8000748:	f001 fb72 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2108      	movs	r1, #8
 8000750:	481b      	ldr	r0, [pc, #108]	; (80007c0 <MX_GPIO_Init+0x16c>)
 8000752:	f001 fb6d 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|ILI9341_RES_Pin;
 8000756:	2321      	movs	r3, #33	; 0x21
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4812      	ldr	r0, [pc, #72]	; (80007b8 <MX_GPIO_Init+0x164>)
 800076e:	f001 f9c3 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000772:	2301      	movs	r3, #1
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <MX_GPIO_Init+0x168>)
 800078a:	f001 f9b5 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800078e:	2308      	movs	r3, #8
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4806      	ldr	r0, [pc, #24]	; (80007c0 <MX_GPIO_Init+0x16c>)
 80007a6:	f001 f9a7 	bl	8001af8 <HAL_GPIO_Init>

}
 80007aa:	bf00      	nop
 80007ac:	3730      	adds	r7, #48	; 0x30
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020800 	.word	0x40020800
 80007bc:	40020400 	.word	0x40020400
 80007c0:	40020c00 	.word	0x40020c00

080007c4 <ILI9341_Reset>:
#include "stdio.h"
#include "main.h"


/* Static functions for fundamental instructions */
static void ILI9341_Reset() {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2120      	movs	r1, #32
 80007cc:	4807      	ldr	r0, [pc, #28]	; (80007ec <ILI9341_Reset+0x28>)
 80007ce:	f001 fb2f 	bl	8001e30 <HAL_GPIO_WritePin>
    HAL_Delay(15);
 80007d2:	200f      	movs	r0, #15
 80007d4:	f001 f886 	bl	80018e4 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2120      	movs	r1, #32
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <ILI9341_Reset+0x28>)
 80007de:	f001 fb27 	bl	8001e30 <HAL_GPIO_WritePin>
    HAL_Delay(15);
 80007e2:	200f      	movs	r0, #15
 80007e4:	f001 f87e 	bl	80018e4 <HAL_Delay>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40020800 	.word	0x40020800

080007f0 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint16_t cmd) {
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	80fb      	strh	r3, [r7, #6]
    ILI9341_WRITE_REG = cmd;
 80007fa:	4a04      	ldr	r2, [pc, #16]	; (800080c <ILI9341_WriteCommand+0x1c>)
 80007fc:	88fb      	ldrh	r3, [r7, #6]
 80007fe:	8013      	strh	r3, [r2, #0]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	6c0007fe 	.word	0x6c0007fe

08000810 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint16_t data) {
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
    ILI9341_WRITE_DATA = data;
 800081a:	4a04      	ldr	r2, [pc, #16]	; (800082c <ILI9341_WriteData+0x1c>)
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	8013      	strh	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	6c000ffe 	.word	0x6c000ffe

08000830 <ILI9341_WriteDataMultiple>:

static void ILI9341_WriteDataMultiple(uint16_t * datas, uint32_t dataNums) {
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
    while (dataNums--)
 800083a:	e005      	b.n	8000848 <ILI9341_WriteDataMultiple+0x18>
    {
        ILI9341_WRITE_DATA = *datas++;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	1c9a      	adds	r2, r3, #2
 8000840:	607a      	str	r2, [r7, #4]
 8000842:	4a07      	ldr	r2, [pc, #28]	; (8000860 <ILI9341_WriteDataMultiple+0x30>)
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	8013      	strh	r3, [r2, #0]
    while (dataNums--)
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	603a      	str	r2, [r7, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1f4      	bne.n	800083c <ILI9341_WriteDataMultiple+0xc>
    }
}
 8000852:	bf00      	nop
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	6c000ffe 	.word	0x6c000ffe

08000864 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4604      	mov	r4, r0
 800086c:	4608      	mov	r0, r1
 800086e:	4611      	mov	r1, r2
 8000870:	461a      	mov	r2, r3
 8000872:	4623      	mov	r3, r4
 8000874:	80fb      	strh	r3, [r7, #6]
 8000876:	4603      	mov	r3, r0
 8000878:	80bb      	strh	r3, [r7, #4]
 800087a:	460b      	mov	r3, r1
 800087c:	807b      	strh	r3, [r7, #2]
 800087e:	4613      	mov	r3, r2
 8000880:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8000882:	202a      	movs	r0, #42	; 0x2a
 8000884:	f7ff ffb4 	bl	80007f0 <ILI9341_WriteCommand>
    {
        ILI9341_WriteData(x0 >> 8);
 8000888:	88fb      	ldrh	r3, [r7, #6]
 800088a:	0a1b      	lsrs	r3, r3, #8
 800088c:	b29b      	uxth	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ffbe 	bl	8000810 <ILI9341_WriteData>
        ILI9341_WriteData(x0 & 0x00FF);
 8000894:	88fb      	ldrh	r3, [r7, #6]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	b29b      	uxth	r3, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ffb8 	bl	8000810 <ILI9341_WriteData>
        ILI9341_WriteData(x1 >> 8);
 80008a0:	887b      	ldrh	r3, [r7, #2]
 80008a2:	0a1b      	lsrs	r3, r3, #8
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ffb2 	bl	8000810 <ILI9341_WriteData>
        ILI9341_WriteData(x1 & 0x00FF);
 80008ac:	887b      	ldrh	r3, [r7, #2]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ffac 	bl	8000810 <ILI9341_WriteData>
    }
    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80008b8:	202b      	movs	r0, #43	; 0x2b
 80008ba:	f7ff ff99 	bl	80007f0 <ILI9341_WriteCommand>
    {
        ILI9341_WriteData(y0 >> 8);
 80008be:	88bb      	ldrh	r3, [r7, #4]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ffa3 	bl	8000810 <ILI9341_WriteData>
        ILI9341_WriteData(y0 & 0x00FF);
 80008ca:	88bb      	ldrh	r3, [r7, #4]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff9d 	bl	8000810 <ILI9341_WriteData>
        ILI9341_WriteData(y1 >> 8);
 80008d6:	883b      	ldrh	r3, [r7, #0]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	b29b      	uxth	r3, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff97 	bl	8000810 <ILI9341_WriteData>
        ILI9341_WriteData(y1 & 0x00FF);
 80008e2:	883b      	ldrh	r3, [r7, #0]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff91 	bl	8000810 <ILI9341_WriteData>
    }
    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80008ee:	202c      	movs	r0, #44	; 0x2c
 80008f0:	f7ff ff7e 	bl	80007f0 <ILI9341_WriteCommand>
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd90      	pop	{r4, r7, pc}

080008fc <ILI9341_Init>:

void ILI9341_Init() {
 80008fc:	b5b0      	push	{r4, r5, r7, lr}
 80008fe:	b0a8      	sub	sp, #160	; 0xa0
 8000900:	af00      	add	r7, sp, #0
    ILI9341_Reset();
 8000902:	f7ff ff5f 	bl	80007c4 <ILI9341_Reset>
    // command list is based on https://github.com/martnak/STM32-ILI9341
    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8000906:	2001      	movs	r0, #1
 8000908:	f7ff ff72 	bl	80007f0 <ILI9341_WriteCommand>
    HAL_Delay(500);
 800090c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000910:	f000 ffe8 	bl	80018e4 <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000914:	20cb      	movs	r0, #203	; 0xcb
 8000916:	f7ff ff6b 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800091a:	4a8b      	ldr	r2, [pc, #556]	; (8000b48 <ILI9341_Init+0x24c>)
 800091c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000920:	ca07      	ldmia	r2, {r0, r1, r2}
 8000922:	c303      	stmia	r3!, {r0, r1}
 8000924:	801a      	strh	r2, [r3, #0]
        ILI9341_WriteDataMultiple(data, 5);
 8000926:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800092a:	2105      	movs	r1, #5
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff7f 	bl	8000830 <ILI9341_WriteDataMultiple>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8000932:	20cf      	movs	r0, #207	; 0xcf
 8000934:	f7ff ff5c 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x00, 0xC1, 0x30 };
 8000938:	4a84      	ldr	r2, [pc, #528]	; (8000b4c <ILI9341_Init+0x250>)
 800093a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800093e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000942:	6018      	str	r0, [r3, #0]
 8000944:	3304      	adds	r3, #4
 8000946:	8019      	strh	r1, [r3, #0]
        ILI9341_WriteDataMultiple(data, 3);
 8000948:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800094c:	2103      	movs	r1, #3
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff6e 	bl	8000830 <ILI9341_WriteDataMultiple>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8000954:	20e8      	movs	r0, #232	; 0xe8
 8000956:	f7ff ff4b 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x85, 0x00, 0x78 };
 800095a:	4a7d      	ldr	r2, [pc, #500]	; (8000b50 <ILI9341_Init+0x254>)
 800095c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000960:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000964:	6018      	str	r0, [r3, #0]
 8000966:	3304      	adds	r3, #4
 8000968:	8019      	strh	r1, [r3, #0]
        ILI9341_WriteDataMultiple(data, 3);
 800096a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800096e:	2103      	movs	r1, #3
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff5d 	bl	8000830 <ILI9341_WriteDataMultiple>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0x00EA);
 8000976:	20ea      	movs	r0, #234	; 0xea
 8000978:	f7ff ff3a 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x00, 0x00 };
 800097c:	2300      	movs	r3, #0
 800097e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8000982:	2300      	movs	r3, #0
 8000984:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        ILI9341_WriteDataMultiple(data, 2);
 8000988:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800098c:	2102      	movs	r1, #2
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ff4e 	bl	8000830 <ILI9341_WriteDataMultiple>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8000994:	20ed      	movs	r0, #237	; 0xed
 8000996:	f7ff ff2b 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x04, 0x03, 0x12, 0x81 };
 800099a:	4a6e      	ldr	r2, [pc, #440]	; (8000b54 <ILI9341_Init+0x258>)
 800099c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80009a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009a4:	e883 0003 	stmia.w	r3, {r0, r1}
        ILI9341_WriteDataMultiple(data, 4);
 80009a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80009ac:	2104      	movs	r1, #4
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff3e 	bl	8000830 <ILI9341_WriteDataMultiple>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80009b4:	20f7      	movs	r0, #247	; 0xf7
 80009b6:	f7ff ff1b 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x20 };
 80009ba:	2320      	movs	r3, #32
 80009bc:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        ILI9341_WriteDataMultiple(data, 1);
 80009c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009c4:	2101      	movs	r1, #1
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ff32 	bl	8000830 <ILI9341_WriteDataMultiple>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 80009cc:	20c0      	movs	r0, #192	; 0xc0
 80009ce:	f7ff ff0f 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x23 };
 80009d2:	2323      	movs	r3, #35	; 0x23
 80009d4:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        ILI9341_WriteDataMultiple(data, 1);
 80009d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009dc:	2101      	movs	r1, #1
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ff26 	bl	8000830 <ILI9341_WriteDataMultiple>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80009e4:	20c1      	movs	r0, #193	; 0xc1
 80009e6:	f7ff ff03 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x10 };
 80009ea:	2310      	movs	r3, #16
 80009ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        ILI9341_WriteDataMultiple(data, 1);
 80009f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009f4:	2101      	movs	r1, #1
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff1a 	bl	8000830 <ILI9341_WriteDataMultiple>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80009fc:	20c5      	movs	r0, #197	; 0xc5
 80009fe:	f7ff fef7 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x3E, 0x28 };
 8000a02:	4b55      	ldr	r3, [pc, #340]	; (8000b58 <ILI9341_Init+0x25c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	66bb      	str	r3, [r7, #104]	; 0x68
        ILI9341_WriteDataMultiple(data, 2);
 8000a08:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ff0e 	bl	8000830 <ILI9341_WriteDataMultiple>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8000a14:	20c7      	movs	r0, #199	; 0xc7
 8000a16:	f7ff feeb 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x86 };
 8000a1a:	2386      	movs	r3, #134	; 0x86
 8000a1c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        ILI9341_WriteDataMultiple(data, 1);
 8000a20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a24:	2101      	movs	r1, #1
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ff02 	bl	8000830 <ILI9341_WriteDataMultiple>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8000a2c:	2036      	movs	r0, #54	; 0x36
 8000a2e:	f7ff fedf 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x48 };
 8000a32:	2348      	movs	r3, #72	; 0x48
 8000a34:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        ILI9341_WriteDataMultiple(data, 1);
 8000a38:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fef6 	bl	8000830 <ILI9341_WriteDataMultiple>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8000a44:	203a      	movs	r0, #58	; 0x3a
 8000a46:	f7ff fed3 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x55 };
 8000a4a:	2355      	movs	r3, #85	; 0x55
 8000a4c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        ILI9341_WriteDataMultiple(data, 1);
 8000a50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a54:	2101      	movs	r1, #1
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff feea 	bl	8000830 <ILI9341_WriteDataMultiple>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8000a5c:	20b1      	movs	r0, #177	; 0xb1
 8000a5e:	f7ff fec7 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x00, 0x18 };
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8000a68:	2318      	movs	r3, #24
 8000a6a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        ILI9341_WriteDataMultiple(data, 1);
 8000a6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a72:	2101      	movs	r1, #1
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fedb 	bl	8000830 <ILI9341_WriteDataMultiple>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8000a7a:	20b6      	movs	r0, #182	; 0xb6
 8000a7c:	f7ff feb8 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x08, 0x82, 0x27 };
 8000a80:	4a36      	ldr	r2, [pc, #216]	; (8000b5c <ILI9341_Init+0x260>)
 8000a82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a8a:	6018      	str	r0, [r3, #0]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	8019      	strh	r1, [r3, #0]
        ILI9341_WriteDataMultiple(data, 3);
 8000a90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a94:	2103      	movs	r1, #3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff feca 	bl	8000830 <ILI9341_WriteDataMultiple>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8000a9c:	20f2      	movs	r0, #242	; 0xf2
 8000a9e:	f7ff fea7 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x00 };
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteDataMultiple(data, 1);
 8000aa8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aac:	2101      	movs	r1, #1
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff febe 	bl	8000830 <ILI9341_WriteDataMultiple>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8000ab4:	2026      	movs	r0, #38	; 0x26
 8000ab6:	f7ff fe9b 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x01 };
 8000aba:	2301      	movs	r3, #1
 8000abc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteDataMultiple(data, 1);
 8000ac0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff feb2 	bl	8000830 <ILI9341_WriteDataMultiple>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8000acc:	20e0      	movs	r0, #224	; 0xe0
 8000ace:	f7ff fe8f 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000ad2:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <ILI9341_Init+0x264>)
 8000ad4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000ad8:	461d      	mov	r5, r3
 8000ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ade:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ae2:	c407      	stmia	r4!, {r0, r1, r2}
 8000ae4:	8023      	strh	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteDataMultiple(data, 15);
 8000ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aea:	210f      	movs	r1, #15
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fe9f 	bl	8000830 <ILI9341_WriteDataMultiple>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8000af2:	20e1      	movs	r0, #225	; 0xe1
 8000af4:	f7ff fe7c 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000af8:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <ILI9341_Init+0x268>)
 8000afa:	f107 0408 	add.w	r4, r7, #8
 8000afe:	461d      	mov	r5, r3
 8000b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b08:	c407      	stmia	r4!, {r0, r1, r2}
 8000b0a:	8023      	strh	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteDataMultiple(data, 15);
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	210f      	movs	r1, #15
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fe8c 	bl	8000830 <ILI9341_WriteDataMultiple>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8000b18:	2011      	movs	r0, #17
 8000b1a:	f7ff fe69 	bl	80007f0 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000b1e:	2078      	movs	r0, #120	; 0x78
 8000b20:	f000 fee0 	bl	80018e4 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8000b24:	2029      	movs	r0, #41	; 0x29
 8000b26:	f7ff fe63 	bl	80007f0 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8000b2a:	2036      	movs	r0, #54	; 0x36
 8000b2c:	f7ff fe60 	bl	80007f0 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { ILI9341_ROTATION };
 8000b30:	23e8      	movs	r3, #232	; 0xe8
 8000b32:	80bb      	strh	r3, [r7, #4]
        ILI9341_WriteDataMultiple(data, 1);
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2101      	movs	r1, #1
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fe79 	bl	8000830 <ILI9341_WriteDataMultiple>
    }
}
 8000b3e:	bf00      	nop
 8000b40:	37a0      	adds	r7, #160	; 0xa0
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bdb0      	pop	{r4, r5, r7, pc}
 8000b46:	bf00      	nop
 8000b48:	080029dc 	.word	0x080029dc
 8000b4c:	080029e8 	.word	0x080029e8
 8000b50:	080029f0 	.word	0x080029f0
 8000b54:	080029f8 	.word	0x080029f8
 8000b58:	08002a00 	.word	0x08002a00
 8000b5c:	08002a04 	.word	0x08002a04
 8000b60:	08002a0c 	.word	0x08002a0c
 8000b64:	08002a2c 	.word	0x08002a2c

08000b68 <ILI9341_DrawPixel>:


void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
 8000b72:	460b      	mov	r3, r1
 8000b74:	80bb      	strh	r3, [r7, #4]
 8000b76:	4613      	mov	r3, r2
 8000b78:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b80:	d211      	bcs.n	8000ba6 <ILI9341_DrawPixel+0x3e>
 8000b82:	88bb      	ldrh	r3, [r7, #4]
 8000b84:	2bef      	cmp	r3, #239	; 0xef
 8000b86:	d80e      	bhi.n	8000ba6 <ILI9341_DrawPixel+0x3e>
        return;
    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 8000b88:	88fb      	ldrh	r3, [r7, #6]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	88bb      	ldrh	r3, [r7, #4]
 8000b90:	3301      	adds	r3, #1
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	88b9      	ldrh	r1, [r7, #4]
 8000b96:	88f8      	ldrh	r0, [r7, #6]
 8000b98:	f7ff fe64 	bl	8000864 <ILI9341_SetAddressWindow>
    ILI9341_WriteData(color);
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fe36 	bl	8000810 <ILI9341_WriteData>
 8000ba4:	e000      	b.n	8000ba8 <ILI9341_DrawPixel+0x40>
        return;
 8000ba6:	bf00      	nop
}
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <ILI9341_WriteChar>:
    }
}
 */

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000bae:	b082      	sub	sp, #8
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b087      	sub	sp, #28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bb8:	4603      	mov	r3, r0
 8000bba:	80fb      	strh	r3, [r7, #6]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	80bb      	strh	r3, [r7, #4]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;
    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000bc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	4413      	add	r3, r2
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	b29c      	uxth	r4, r3
 8000bd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	88bb      	ldrh	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	3b01      	subs	r3, #1
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	88b9      	ldrh	r1, [r7, #4]
 8000be6:	88f8      	ldrh	r0, [r7, #6]
 8000be8:	4622      	mov	r2, r4
 8000bea:	f7ff fe3b 	bl	8000864 <ILI9341_SetAddressWindow>
    for (i = 0; i < font.height; i++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	e041      	b.n	8000c78 <ILI9341_WriteChar+0xca>
    {
        b = font.data[(ch-32) * font.height + i];
 8000bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bf6:	78fb      	ldrb	r3, [r7, #3]
 8000bf8:	3b20      	subs	r3, #32
 8000bfa:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8000bfe:	fb01 f303 	mul.w	r3, r1, r3
 8000c02:	4619      	mov	r1, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	440b      	add	r3, r1
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	4413      	add	r3, r2
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < font.width; j++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	e027      	b.n	8000c66 <ILI9341_WriteChar+0xb8>
        {
            if ((b << j) & 0x8000)
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d00e      	beq.n	8000c44 <ILI9341_WriteChar+0x96>
                ILI9341_DrawPixel(x+j, y+i, color);
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b298      	uxth	r0, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	88bb      	ldrh	r3, [r7, #4]
 8000c36:	4413      	add	r3, r2
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f7ff ff93 	bl	8000b68 <ILI9341_DrawPixel>
 8000c42:	e00d      	b.n	8000c60 <ILI9341_WriteChar+0xb2>

            else
                ILI9341_DrawPixel(x+j, y+i, bgcolor);
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	b298      	uxth	r0, r3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	88bb      	ldrh	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f7ff ff84 	bl	8000b68 <ILI9341_DrawPixel>
        for (j = 0; j < font.width; j++)
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	3301      	adds	r3, #1
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d3d1      	bcc.n	8000c16 <ILI9341_WriteChar+0x68>
    for (i = 0; i < font.height; i++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d3b7      	bcc.n	8000bf4 <ILI9341_WriteChar+0x46>
        }
    }
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	371c      	adds	r7, #28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000c90:	b002      	add	sp, #8
 8000c92:	4770      	bx	lr

08000c94 <ILI9341_WriteString>:


void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000c94:	b082      	sub	sp, #8
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af04      	add	r7, sp, #16
 8000c9c:	603a      	str	r2, [r7, #0]
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	80fb      	strh	r3, [r7, #6]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	80bb      	strh	r3, [r7, #4]
    while(*str) {
 8000ca8:	e02e      	b.n	8000d08 <ILI9341_WriteString+0x74>
        if(x + font.width >= ILI9341_WIDTH) {
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	7d3a      	ldrb	r2, [r7, #20]
 8000cae:	4413      	add	r3, r2
 8000cb0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000cb4:	db13      	blt.n	8000cde <ILI9341_WriteString+0x4a>
            x = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000cba:	7d7b      	ldrb	r3, [r7, #21]
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	88bb      	ldrh	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8000cc4:	88bb      	ldrh	r3, [r7, #4]
 8000cc6:	7d7a      	ldrb	r2, [r7, #21]
 8000cc8:	4413      	add	r3, r2
 8000cca:	2bef      	cmp	r3, #239	; 0xef
 8000ccc:	dc21      	bgt.n	8000d12 <ILI9341_WriteString+0x7e>
                break;
            }

            if(*str == ' ') {
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b20      	cmp	r3, #32
 8000cd4:	d103      	bne.n	8000cde <ILI9341_WriteString+0x4a>
                // skip spaces in the beginning of the new line
                str++;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	603b      	str	r3, [r7, #0]
                continue;
 8000cdc:	e014      	b.n	8000d08 <ILI9341_WriteString+0x74>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	781a      	ldrb	r2, [r3, #0]
 8000ce2:	88b9      	ldrh	r1, [r7, #4]
 8000ce4:	88f8      	ldrh	r0, [r7, #6]
 8000ce6:	8c3b      	ldrh	r3, [r7, #32]
 8000ce8:	9302      	str	r3, [sp, #8]
 8000cea:	8bbb      	ldrh	r3, [r7, #28]
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	f7ff ff5b 	bl	8000bae <ILI9341_WriteChar>
        x += font.width;
 8000cf8:	7d3b      	ldrb	r3, [r7, #20]
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	88fb      	ldrh	r3, [r7, #6]
 8000cfe:	4413      	add	r3, r2
 8000d00:	80fb      	strh	r3, [r7, #6]
        str++;
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1cc      	bne.n	8000caa <ILI9341_WriteString+0x16>
    }
}
 8000d10:	e000      	b.n	8000d14 <ILI9341_WriteString+0x80>
                break;
 8000d12:	bf00      	nop
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d1e:	b002      	add	sp, #8
 8000d20:	4770      	bx	lr

08000d22 <ILI9341_FillRectangle>:


void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000d22:	b590      	push	{r4, r7, lr}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4604      	mov	r4, r0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4623      	mov	r3, r4
 8000d32:	80fb      	strh	r3, [r7, #6]
 8000d34:	4603      	mov	r3, r0
 8000d36:	80bb      	strh	r3, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000d46:	d23d      	bcs.n	8000dc4 <ILI9341_FillRectangle+0xa2>
 8000d48:	88bb      	ldrh	r3, [r7, #4]
 8000d4a:	2bef      	cmp	r3, #239	; 0xef
 8000d4c:	d83a      	bhi.n	8000dc4 <ILI9341_FillRectangle+0xa2>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000d4e:	88fa      	ldrh	r2, [r7, #6]
 8000d50:	887b      	ldrh	r3, [r7, #2]
 8000d52:	4413      	add	r3, r2
 8000d54:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000d58:	dd03      	ble.n	8000d62 <ILI9341_FillRectangle+0x40>
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8000d60:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000d62:	88ba      	ldrh	r2, [r7, #4]
 8000d64:	883b      	ldrh	r3, [r7, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	2bf0      	cmp	r3, #240	; 0xf0
 8000d6a:	dd03      	ble.n	8000d74 <ILI9341_FillRectangle+0x52>
 8000d6c:	88bb      	ldrh	r3, [r7, #4]
 8000d6e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000d72:	803b      	strh	r3, [r7, #0]

    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000d74:	88fa      	ldrh	r2, [r7, #6]
 8000d76:	887b      	ldrh	r3, [r7, #2]
 8000d78:	4413      	add	r3, r2
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	b29c      	uxth	r4, r3
 8000d80:	88ba      	ldrh	r2, [r7, #4]
 8000d82:	883b      	ldrh	r3, [r7, #0]
 8000d84:	4413      	add	r3, r2
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	88b9      	ldrh	r1, [r7, #4]
 8000d8e:	88f8      	ldrh	r0, [r7, #6]
 8000d90:	4622      	mov	r2, r4
 8000d92:	f7ff fd67 	bl	8000864 <ILI9341_SetAddressWindow>
    for(y = h; y > 0; y--) {
 8000d96:	883b      	ldrh	r3, [r7, #0]
 8000d98:	80bb      	strh	r3, [r7, #4]
 8000d9a:	e00f      	b.n	8000dbc <ILI9341_FillRectangle+0x9a>
        for(x = w; x > 0; x--) {
 8000d9c:	887b      	ldrh	r3, [r7, #2]
 8000d9e:	80fb      	strh	r3, [r7, #6]
 8000da0:	e006      	b.n	8000db0 <ILI9341_FillRectangle+0x8e>
            ILI9341_WriteData(color);
 8000da2:	8b3b      	ldrh	r3, [r7, #24]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fd33 	bl	8000810 <ILI9341_WriteData>
        for(x = w; x > 0; x--) {
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	3b01      	subs	r3, #1
 8000dae:	80fb      	strh	r3, [r7, #6]
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1f5      	bne.n	8000da2 <ILI9341_FillRectangle+0x80>
    for(y = h; y > 0; y--) {
 8000db6:	88bb      	ldrh	r3, [r7, #4]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	80bb      	strh	r3, [r7, #4]
 8000dbc:	88bb      	ldrh	r3, [r7, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1ec      	bne.n	8000d9c <ILI9341_FillRectangle+0x7a>
 8000dc2:	e000      	b.n	8000dc6 <ILI9341_FillRectangle+0xa4>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000dc4:	bf00      	nop
        }
    }
}
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd90      	pop	{r4, r7, pc}

08000dcc <ILI9341_FillScreen>:


void ILI9341_FillScreen(uint16_t color) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af02      	add	r7, sp, #8
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	23f0      	movs	r3, #240	; 0xf0
 8000ddc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000de0:	2100      	movs	r1, #0
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff ff9d 	bl	8000d22 <ILI9341_FillRectangle>
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <ILI9341_DrawLine>:

void ILI9341_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
                     uint16_t color) {
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b087      	sub	sp, #28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4604      	mov	r4, r0
 8000df8:	4608      	mov	r0, r1
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4623      	mov	r3, r4
 8000e00:	80fb      	strh	r3, [r7, #6]
 8000e02:	4603      	mov	r3, r0
 8000e04:	80bb      	strh	r3, [r7, #4]
 8000e06:	460b      	mov	r3, r1
 8000e08:	807b      	strh	r3, [r7, #2]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	803b      	strh	r3, [r7, #0]
    uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8000e0e:	883a      	ldrh	r2, [r7, #0]
 8000e10:	88bb      	ldrh	r3, [r7, #4]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e18:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e1c:	8879      	ldrh	r1, [r7, #2]
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	1acb      	subs	r3, r1, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	bfb8      	it	lt
 8000e26:	425b      	neglt	r3, r3
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	bfcc      	ite	gt
 8000e2c:	2301      	movgt	r3, #1
 8000e2e:	2300      	movle	r3, #0
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	827b      	strh	r3, [r7, #18]
    if (steep) {
 8000e34:	8a7b      	ldrh	r3, [r7, #18]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00b      	beq.n	8000e52 <ILI9341_DrawLine+0x62>
        swap = x0;
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	823b      	strh	r3, [r7, #16]
        x0 = y0;
 8000e3e:	88bb      	ldrh	r3, [r7, #4]
 8000e40:	80fb      	strh	r3, [r7, #6]
        y0 = swap;
 8000e42:	8a3b      	ldrh	r3, [r7, #16]
 8000e44:	80bb      	strh	r3, [r7, #4]

        swap = x1;
 8000e46:	887b      	ldrh	r3, [r7, #2]
 8000e48:	823b      	strh	r3, [r7, #16]
        x1 = y1;
 8000e4a:	883b      	ldrh	r3, [r7, #0]
 8000e4c:	807b      	strh	r3, [r7, #2]
        y1 = swap;
 8000e4e:	8a3b      	ldrh	r3, [r7, #16]
 8000e50:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 8000e52:	88fa      	ldrh	r2, [r7, #6]
 8000e54:	887b      	ldrh	r3, [r7, #2]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d90b      	bls.n	8000e72 <ILI9341_DrawLine+0x82>
        swap = x0;
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	823b      	strh	r3, [r7, #16]
        x0 = x1;
 8000e5e:	887b      	ldrh	r3, [r7, #2]
 8000e60:	80fb      	strh	r3, [r7, #6]
        x1 = swap;
 8000e62:	8a3b      	ldrh	r3, [r7, #16]
 8000e64:	807b      	strh	r3, [r7, #2]

        swap = y0;
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	823b      	strh	r3, [r7, #16]
        y0 = y1;
 8000e6a:	883b      	ldrh	r3, [r7, #0]
 8000e6c:	80bb      	strh	r3, [r7, #4]
        y1 = swap;
 8000e6e:	8a3b      	ldrh	r3, [r7, #16]
 8000e70:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 8000e7c:	883a      	ldrh	r2, [r7, #0]
 8000e7e:	88bb      	ldrh	r3, [r7, #4]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	bfb8      	it	lt
 8000e86:	425b      	neglt	r3, r3
 8000e88:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8000e8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e8e:	0fda      	lsrs	r2, r3, #31
 8000e90:	4413      	add	r3, r2
 8000e92:	105b      	asrs	r3, r3, #1
 8000e94:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 8000e96:	88ba      	ldrh	r2, [r7, #4]
 8000e98:	883b      	ldrh	r3, [r7, #0]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d202      	bcs.n	8000ea4 <ILI9341_DrawLine+0xb4>
        ystep = 1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	82bb      	strh	r3, [r7, #20]
 8000ea2:	e028      	b.n	8000ef6 <ILI9341_DrawLine+0x106>
    } else {
        ystep = -1;
 8000ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ea8:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8000eaa:	e024      	b.n	8000ef6 <ILI9341_DrawLine+0x106>
        if (steep) {
 8000eac:	8a7b      	ldrh	r3, [r7, #18]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d006      	beq.n	8000ec0 <ILI9341_DrawLine+0xd0>
            ILI9341_DrawPixel(y0, x0, color);
 8000eb2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000eb4:	88f9      	ldrh	r1, [r7, #6]
 8000eb6:	88bb      	ldrh	r3, [r7, #4]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fe55 	bl	8000b68 <ILI9341_DrawPixel>
 8000ebe:	e005      	b.n	8000ecc <ILI9341_DrawLine+0xdc>
        } else {
            ILI9341_DrawPixel(x0, y0, color);
 8000ec0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ec2:	88b9      	ldrh	r1, [r7, #4]
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fe4e 	bl	8000b68 <ILI9341_DrawPixel>
        }
        err -= dy;
 8000ecc:	8afa      	ldrh	r2, [r7, #22]
 8000ece:	89bb      	ldrh	r3, [r7, #12]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 8000ed6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	da08      	bge.n	8000ef0 <ILI9341_DrawLine+0x100>
            y0 += ystep;
 8000ede:	8aba      	ldrh	r2, [r7, #20]
 8000ee0:	88bb      	ldrh	r3, [r7, #4]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8000ee6:	8afa      	ldrh	r2, [r7, #22]
 8000ee8:	89fb      	ldrh	r3, [r7, #14]
 8000eea:	4413      	add	r3, r2
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	80fb      	strh	r3, [r7, #6]
 8000ef6:	88fa      	ldrh	r2, [r7, #6]
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d9d6      	bls.n	8000eac <ILI9341_DrawLine+0xbc>
        }
    }
}
 8000efe:	bf00      	nop
 8000f00:	bf00      	nop
 8000f02:	371c      	adds	r7, #28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd90      	pop	{r4, r7, pc}

08000f08 <ILI9341_DrawCircle>:

void ILI9341_DrawCircle(uint16_t x0, uint16_t y0, uint8_t r, uint16_t color)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4604      	mov	r4, r0
 8000f10:	4608      	mov	r0, r1
 8000f12:	4611      	mov	r1, r2
 8000f14:	461a      	mov	r2, r3
 8000f16:	4623      	mov	r3, r4
 8000f18:	80fb      	strh	r3, [r7, #6]
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80bb      	strh	r3, [r7, #4]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	70fb      	strb	r3, [r7, #3]
 8000f22:	4613      	mov	r3, r2
 8000f24:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	f1c3 0301 	rsb	r3, r3, #1
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000f32:	2301      	movs	r3, #1
 8000f34:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000f36:	78fb      	ldrb	r3, [r7, #3]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	03d2      	lsls	r2, r2, #15
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8000f4a:	78fb      	ldrb	r3, [r7, #3]
 8000f4c:	81fb      	strh	r3, [r7, #14]

    ILI9341_DrawPixel(x0, y0 + r, color);
 8000f4e:	78fb      	ldrb	r3, [r7, #3]
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	88bb      	ldrh	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	b299      	uxth	r1, r3
 8000f58:	883a      	ldrh	r2, [r7, #0]
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fe03 	bl	8000b68 <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x0, y0 - r, color);
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	88ba      	ldrh	r2, [r7, #4]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	883a      	ldrh	r2, [r7, #0]
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fdf9 	bl	8000b68 <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x0 + r, y0, color);
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	883a      	ldrh	r2, [r7, #0]
 8000f82:	88b9      	ldrh	r1, [r7, #4]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fdef 	bl	8000b68 <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x0 - r, y0, color);
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	88fa      	ldrh	r2, [r7, #6]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	883a      	ldrh	r2, [r7, #0]
 8000f96:	88b9      	ldrh	r1, [r7, #4]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fde5 	bl	8000b68 <ILI9341_DrawPixel>

    while (x < y) {
 8000f9e:	e081      	b.n	80010a4 <ILI9341_DrawCircle+0x19c>
        if (f >= 0) {
 8000fa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0e      	blt.n	8000fc6 <ILI9341_DrawCircle+0xbe>
            y--;
 8000fa8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000fb4:	8a7b      	ldrh	r3, [r7, #18]
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8000fbc:	8afa      	ldrh	r2, [r7, #22]
 8000fbe:	8a7b      	ldrh	r3, [r7, #18]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000fc6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000fd2:	8abb      	ldrh	r3, [r7, #20]
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8000fda:	8afa      	ldrh	r2, [r7, #22]
 8000fdc:	8abb      	ldrh	r3, [r7, #20]
 8000fde:	4413      	add	r3, r2
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	82fb      	strh	r3, [r7, #22]

        ILI9341_DrawPixel(x0 + x, y0 + y, color);
 8000fe4:	8a3a      	ldrh	r2, [r7, #16]
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	4413      	add	r3, r2
 8000fea:	b298      	uxth	r0, r3
 8000fec:	89fa      	ldrh	r2, [r7, #14]
 8000fee:	88bb      	ldrh	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	883a      	ldrh	r2, [r7, #0]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f7ff fdb6 	bl	8000b68 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 - x, y0 + y, color);
 8000ffc:	8a3b      	ldrh	r3, [r7, #16]
 8000ffe:	88fa      	ldrh	r2, [r7, #6]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	b298      	uxth	r0, r3
 8001004:	89fa      	ldrh	r2, [r7, #14]
 8001006:	88bb      	ldrh	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	b29b      	uxth	r3, r3
 800100c:	883a      	ldrh	r2, [r7, #0]
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fdaa 	bl	8000b68 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 + x, y0 - y, color);
 8001014:	8a3a      	ldrh	r2, [r7, #16]
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	4413      	add	r3, r2
 800101a:	b298      	uxth	r0, r3
 800101c:	89fb      	ldrh	r3, [r7, #14]
 800101e:	88ba      	ldrh	r2, [r7, #4]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	b29b      	uxth	r3, r3
 8001024:	883a      	ldrh	r2, [r7, #0]
 8001026:	4619      	mov	r1, r3
 8001028:	f7ff fd9e 	bl	8000b68 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 - x, y0 - y, color);
 800102c:	8a3b      	ldrh	r3, [r7, #16]
 800102e:	88fa      	ldrh	r2, [r7, #6]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	b298      	uxth	r0, r3
 8001034:	89fb      	ldrh	r3, [r7, #14]
 8001036:	88ba      	ldrh	r2, [r7, #4]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	b29b      	uxth	r3, r3
 800103c:	883a      	ldrh	r2, [r7, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff fd92 	bl	8000b68 <ILI9341_DrawPixel>

        ILI9341_DrawPixel(x0 + y, y0 + x, color);
 8001044:	89fa      	ldrh	r2, [r7, #14]
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	4413      	add	r3, r2
 800104a:	b298      	uxth	r0, r3
 800104c:	8a3a      	ldrh	r2, [r7, #16]
 800104e:	88bb      	ldrh	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	b29b      	uxth	r3, r3
 8001054:	883a      	ldrh	r2, [r7, #0]
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fd86 	bl	8000b68 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 - y, y0 + x, color);
 800105c:	89fb      	ldrh	r3, [r7, #14]
 800105e:	88fa      	ldrh	r2, [r7, #6]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	b298      	uxth	r0, r3
 8001064:	8a3a      	ldrh	r2, [r7, #16]
 8001066:	88bb      	ldrh	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	b29b      	uxth	r3, r3
 800106c:	883a      	ldrh	r2, [r7, #0]
 800106e:	4619      	mov	r1, r3
 8001070:	f7ff fd7a 	bl	8000b68 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 + y, y0 - x, color);
 8001074:	89fa      	ldrh	r2, [r7, #14]
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	4413      	add	r3, r2
 800107a:	b298      	uxth	r0, r3
 800107c:	8a3b      	ldrh	r3, [r7, #16]
 800107e:	88ba      	ldrh	r2, [r7, #4]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	b29b      	uxth	r3, r3
 8001084:	883a      	ldrh	r2, [r7, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	f7ff fd6e 	bl	8000b68 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 - y, y0 - x, color);
 800108c:	89fb      	ldrh	r3, [r7, #14]
 800108e:	88fa      	ldrh	r2, [r7, #6]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	b298      	uxth	r0, r3
 8001094:	8a3b      	ldrh	r3, [r7, #16]
 8001096:	88ba      	ldrh	r2, [r7, #4]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	883a      	ldrh	r2, [r7, #0]
 800109e:	4619      	mov	r1, r3
 80010a0:	f7ff fd62 	bl	8000b68 <ILI9341_DrawPixel>
    while (x < y) {
 80010a4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80010a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	f6ff af77 	blt.w	8000fa0 <ILI9341_DrawCircle+0x98>
    }
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	371c      	adds	r7, #28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd90      	pop	{r4, r7, pc}

080010bc <ILI9341_DrawFilledCircle>:

void ILI9341_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	4604      	mov	r4, r0
 80010c4:	4608      	mov	r0, r1
 80010c6:	4611      	mov	r1, r2
 80010c8:	461a      	mov	r2, r3
 80010ca:	4623      	mov	r3, r4
 80010cc:	80fb      	strh	r3, [r7, #6]
 80010ce:	4603      	mov	r3, r0
 80010d0:	80bb      	strh	r3, [r7, #4]
 80010d2:	460b      	mov	r3, r1
 80010d4:	807b      	strh	r3, [r7, #2]
 80010d6:	4613      	mov	r3, r2
 80010d8:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 80010da:	887b      	ldrh	r3, [r7, #2]
 80010dc:	f1c3 0301 	rsb	r3, r3, #1
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80010e8:	887b      	ldrh	r3, [r7, #2]
 80010ea:	461a      	mov	r2, r3
 80010ec:	03d2      	lsls	r2, r2, #15
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	81fb      	strh	r3, [r7, #14]

    ILI9341_DrawPixel(x0, y0 + r, color);
 80010fe:	88f8      	ldrh	r0, [r7, #6]
 8001100:	88ba      	ldrh	r2, [r7, #4]
 8001102:	887b      	ldrh	r3, [r7, #2]
 8001104:	4413      	add	r3, r2
 8001106:	b29b      	uxth	r3, r3
 8001108:	883a      	ldrh	r2, [r7, #0]
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fd2c 	bl	8000b68 <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x0, y0 - r, color);
 8001110:	88f8      	ldrh	r0, [r7, #6]
 8001112:	88ba      	ldrh	r2, [r7, #4]
 8001114:	887b      	ldrh	r3, [r7, #2]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	b29b      	uxth	r3, r3
 800111a:	883a      	ldrh	r2, [r7, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fd23 	bl	8000b68 <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x0 + r, y0, color);
 8001122:	88fa      	ldrh	r2, [r7, #6]
 8001124:	887b      	ldrh	r3, [r7, #2]
 8001126:	4413      	add	r3, r2
 8001128:	b29b      	uxth	r3, r3
 800112a:	88b9      	ldrh	r1, [r7, #4]
 800112c:	883a      	ldrh	r2, [r7, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fd1a 	bl	8000b68 <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x0 - r, y0, color);
 8001134:	88fa      	ldrh	r2, [r7, #6]
 8001136:	887b      	ldrh	r3, [r7, #2]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	b29b      	uxth	r3, r3
 800113c:	88b9      	ldrh	r1, [r7, #4]
 800113e:	883a      	ldrh	r2, [r7, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fd11 	bl	8000b68 <ILI9341_DrawPixel>
    ILI9341_DrawLine(x0 - r, y0, x0 + r, y0, color);
 8001146:	88fa      	ldrh	r2, [r7, #6]
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	b298      	uxth	r0, r3
 800114e:	88b9      	ldrh	r1, [r7, #4]
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	4413      	add	r3, r2
 8001156:	b29a      	uxth	r2, r3
 8001158:	88bc      	ldrh	r4, [r7, #4]
 800115a:	883b      	ldrh	r3, [r7, #0]
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	4623      	mov	r3, r4
 8001160:	f7ff fe46 	bl	8000df0 <ILI9341_DrawLine>

    while (x < y) {
 8001164:	e079      	b.n	800125a <ILI9341_DrawFilledCircle+0x19e>
        if (f >= 0) {
 8001166:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800116a:	2b00      	cmp	r3, #0
 800116c:	db0e      	blt.n	800118c <ILI9341_DrawFilledCircle+0xd0>
            y--;
 800116e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001172:	b29b      	uxth	r3, r3
 8001174:	3b01      	subs	r3, #1
 8001176:	b29b      	uxth	r3, r3
 8001178:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800117a:	8a7b      	ldrh	r3, [r7, #18]
 800117c:	3302      	adds	r3, #2
 800117e:	b29b      	uxth	r3, r3
 8001180:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8001182:	8afa      	ldrh	r2, [r7, #22]
 8001184:	8a7b      	ldrh	r3, [r7, #18]
 8001186:	4413      	add	r3, r2
 8001188:	b29b      	uxth	r3, r3
 800118a:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800118c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001190:	b29b      	uxth	r3, r3
 8001192:	3301      	adds	r3, #1
 8001194:	b29b      	uxth	r3, r3
 8001196:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001198:	8abb      	ldrh	r3, [r7, #20]
 800119a:	3302      	adds	r3, #2
 800119c:	b29b      	uxth	r3, r3
 800119e:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80011a0:	8afa      	ldrh	r2, [r7, #22]
 80011a2:	8abb      	ldrh	r3, [r7, #20]
 80011a4:	4413      	add	r3, r2
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	82fb      	strh	r3, [r7, #22]

        ILI9341_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 80011aa:	88fa      	ldrh	r2, [r7, #6]
 80011ac:	8a3b      	ldrh	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	b298      	uxth	r0, r3
 80011b2:	88ba      	ldrh	r2, [r7, #4]
 80011b4:	89fb      	ldrh	r3, [r7, #14]
 80011b6:	4413      	add	r3, r2
 80011b8:	b299      	uxth	r1, r3
 80011ba:	88fa      	ldrh	r2, [r7, #6]
 80011bc:	8a3b      	ldrh	r3, [r7, #16]
 80011be:	4413      	add	r3, r2
 80011c0:	b29c      	uxth	r4, r3
 80011c2:	88ba      	ldrh	r2, [r7, #4]
 80011c4:	89fb      	ldrh	r3, [r7, #14]
 80011c6:	4413      	add	r3, r2
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	883b      	ldrh	r3, [r7, #0]
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	4613      	mov	r3, r2
 80011d0:	4622      	mov	r2, r4
 80011d2:	f7ff fe0d 	bl	8000df0 <ILI9341_DrawLine>
        ILI9341_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 80011d6:	88fa      	ldrh	r2, [r7, #6]
 80011d8:	8a3b      	ldrh	r3, [r7, #16]
 80011da:	4413      	add	r3, r2
 80011dc:	b298      	uxth	r0, r3
 80011de:	88ba      	ldrh	r2, [r7, #4]
 80011e0:	89fb      	ldrh	r3, [r7, #14]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	b299      	uxth	r1, r3
 80011e6:	88fa      	ldrh	r2, [r7, #6]
 80011e8:	8a3b      	ldrh	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	b29c      	uxth	r4, r3
 80011ee:	88ba      	ldrh	r2, [r7, #4]
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	883b      	ldrh	r3, [r7, #0]
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	4613      	mov	r3, r2
 80011fc:	4622      	mov	r2, r4
 80011fe:	f7ff fdf7 	bl	8000df0 <ILI9341_DrawLine>

        ILI9341_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 8001202:	88fa      	ldrh	r2, [r7, #6]
 8001204:	89fb      	ldrh	r3, [r7, #14]
 8001206:	4413      	add	r3, r2
 8001208:	b298      	uxth	r0, r3
 800120a:	88ba      	ldrh	r2, [r7, #4]
 800120c:	8a3b      	ldrh	r3, [r7, #16]
 800120e:	4413      	add	r3, r2
 8001210:	b299      	uxth	r1, r3
 8001212:	88fa      	ldrh	r2, [r7, #6]
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b29c      	uxth	r4, r3
 800121a:	88ba      	ldrh	r2, [r7, #4]
 800121c:	8a3b      	ldrh	r3, [r7, #16]
 800121e:	4413      	add	r3, r2
 8001220:	b29a      	uxth	r2, r3
 8001222:	883b      	ldrh	r3, [r7, #0]
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	4613      	mov	r3, r2
 8001228:	4622      	mov	r2, r4
 800122a:	f7ff fde1 	bl	8000df0 <ILI9341_DrawLine>
        ILI9341_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 800122e:	88fa      	ldrh	r2, [r7, #6]
 8001230:	89fb      	ldrh	r3, [r7, #14]
 8001232:	4413      	add	r3, r2
 8001234:	b298      	uxth	r0, r3
 8001236:	88ba      	ldrh	r2, [r7, #4]
 8001238:	8a3b      	ldrh	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	b299      	uxth	r1, r3
 800123e:	88fa      	ldrh	r2, [r7, #6]
 8001240:	89fb      	ldrh	r3, [r7, #14]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	b29c      	uxth	r4, r3
 8001246:	88ba      	ldrh	r2, [r7, #4]
 8001248:	8a3b      	ldrh	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	b29a      	uxth	r2, r3
 800124e:	883b      	ldrh	r3, [r7, #0]
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	4613      	mov	r3, r2
 8001254:	4622      	mov	r2, r4
 8001256:	f7ff fdcb 	bl	8000df0 <ILI9341_DrawLine>
    while (x < y) {
 800125a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800125e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001262:	429a      	cmp	r2, r3
 8001264:	f6ff af7f 	blt.w	8001166 <ILI9341_DrawFilledCircle+0xaa>
    }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	371c      	adds	r7, #28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd90      	pop	{r4, r7, pc}

08001272 <ILI9341_DrawTriangle>:

void ILI9341_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,
                            uint16_t x3, uint16_t y3, uint16_t color)
{
 8001272:	b590      	push	{r4, r7, lr}
 8001274:	b085      	sub	sp, #20
 8001276:	af02      	add	r7, sp, #8
 8001278:	4604      	mov	r4, r0
 800127a:	4608      	mov	r0, r1
 800127c:	4611      	mov	r1, r2
 800127e:	461a      	mov	r2, r3
 8001280:	4623      	mov	r3, r4
 8001282:	80fb      	strh	r3, [r7, #6]
 8001284:	4603      	mov	r3, r0
 8001286:	80bb      	strh	r3, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 800128c:	4613      	mov	r3, r2
 800128e:	803b      	strh	r3, [r7, #0]
    /* Draw lines */
    ILI9341_DrawLine(x1, y1, x2, y2, color);
 8001290:	883c      	ldrh	r4, [r7, #0]
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	88b9      	ldrh	r1, [r7, #4]
 8001296:	88f8      	ldrh	r0, [r7, #6]
 8001298:	8c3b      	ldrh	r3, [r7, #32]
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	4623      	mov	r3, r4
 800129e:	f7ff fda7 	bl	8000df0 <ILI9341_DrawLine>
    ILI9341_DrawLine(x2, y2, x3, y3, color);
 80012a2:	8bbc      	ldrh	r4, [r7, #28]
 80012a4:	8b3a      	ldrh	r2, [r7, #24]
 80012a6:	8839      	ldrh	r1, [r7, #0]
 80012a8:	8878      	ldrh	r0, [r7, #2]
 80012aa:	8c3b      	ldrh	r3, [r7, #32]
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	4623      	mov	r3, r4
 80012b0:	f7ff fd9e 	bl	8000df0 <ILI9341_DrawLine>
    ILI9341_DrawLine(x3, y3, x1, y1, color);
 80012b4:	88bc      	ldrh	r4, [r7, #4]
 80012b6:	88fa      	ldrh	r2, [r7, #6]
 80012b8:	8bb9      	ldrh	r1, [r7, #28]
 80012ba:	8b38      	ldrh	r0, [r7, #24]
 80012bc:	8c3b      	ldrh	r3, [r7, #32]
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	4623      	mov	r3, r4
 80012c2:	f7ff fd95 	bl	8000df0 <ILI9341_DrawLine>
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd90      	pop	{r4, r7, pc}

080012ce <ILI9341_DrawFilledTriangle>:

void ILI9341_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,
                                uint16_t x3, uint16_t y3, uint16_t color)
{
 80012ce:	b590      	push	{r4, r7, lr}
 80012d0:	b08d      	sub	sp, #52	; 0x34
 80012d2:	af02      	add	r7, sp, #8
 80012d4:	4604      	mov	r4, r0
 80012d6:	4608      	mov	r0, r1
 80012d8:	4611      	mov	r1, r2
 80012da:	461a      	mov	r2, r3
 80012dc:	4623      	mov	r3, r4
 80012de:	80fb      	strh	r3, [r7, #6]
 80012e0:	4603      	mov	r3, r0
 80012e2:	80bb      	strh	r3, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
 80012e8:	4613      	mov	r3, r2
 80012ea:	803b      	strh	r3, [r7, #0]
    int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 80012ec:	2300      	movs	r3, #0
 80012ee:	823b      	strh	r3, [r7, #16]
 80012f0:	2300      	movs	r3, #0
 80012f2:	81fb      	strh	r3, [r7, #14]
 80012f4:	2300      	movs	r3, #0
 80012f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80012f8:	2300      	movs	r3, #0
 80012fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80012fc:	2300      	movs	r3, #0
 80012fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8001300:	2300      	movs	r3, #0
 8001302:	843b      	strh	r3, [r7, #32]
            yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8001304:	2300      	movs	r3, #0
 8001306:	83fb      	strh	r3, [r7, #30]
 8001308:	2300      	movs	r3, #0
 800130a:	83bb      	strh	r3, [r7, #28]
 800130c:	2300      	movs	r3, #0
 800130e:	837b      	strh	r3, [r7, #26]
 8001310:	2300      	movs	r3, #0
 8001312:	833b      	strh	r3, [r7, #24]
 8001314:	2300      	movs	r3, #0
 8001316:	82fb      	strh	r3, [r7, #22]
 8001318:	2300      	movs	r3, #0
 800131a:	82bb      	strh	r3, [r7, #20]
            curpixel = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	827b      	strh	r3, [r7, #18]

    deltax = ABS(x2 - x1);
 8001320:	887a      	ldrh	r2, [r7, #2]
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	bfb8      	it	lt
 800132a:	425b      	neglt	r3, r3
 800132c:	823b      	strh	r3, [r7, #16]
    deltay = ABS(y2 - y1);
 800132e:	883a      	ldrh	r2, [r7, #0]
 8001330:	88bb      	ldrh	r3, [r7, #4]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	bfb8      	it	lt
 8001338:	425b      	neglt	r3, r3
 800133a:	81fb      	strh	r3, [r7, #14]
    x = x1;
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	84fb      	strh	r3, [r7, #38]	; 0x26
    y = y1;
 8001340:	88bb      	ldrh	r3, [r7, #4]
 8001342:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (x2 >= x1) {
 8001344:	887a      	ldrh	r2, [r7, #2]
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	429a      	cmp	r2, r3
 800134a:	d304      	bcc.n	8001356 <ILI9341_DrawFilledTriangle+0x88>
        xinc1 = 1;
 800134c:	2301      	movs	r3, #1
 800134e:	847b      	strh	r3, [r7, #34]	; 0x22
        xinc2 = 1;
 8001350:	2301      	movs	r3, #1
 8001352:	843b      	strh	r3, [r7, #32]
 8001354:	e005      	b.n	8001362 <ILI9341_DrawFilledTriangle+0x94>
    }
    else {
        xinc1 = -1;
 8001356:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800135a:	847b      	strh	r3, [r7, #34]	; 0x22
        xinc2 = -1;
 800135c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001360:	843b      	strh	r3, [r7, #32]
    }

    if (y2 >= y1) {
 8001362:	883a      	ldrh	r2, [r7, #0]
 8001364:	88bb      	ldrh	r3, [r7, #4]
 8001366:	429a      	cmp	r2, r3
 8001368:	d304      	bcc.n	8001374 <ILI9341_DrawFilledTriangle+0xa6>
        yinc1 = 1;
 800136a:	2301      	movs	r3, #1
 800136c:	83fb      	strh	r3, [r7, #30]
        yinc2 = 1;
 800136e:	2301      	movs	r3, #1
 8001370:	83bb      	strh	r3, [r7, #28]
 8001372:	e005      	b.n	8001380 <ILI9341_DrawFilledTriangle+0xb2>
    }
    else {
        yinc1 = -1;
 8001374:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001378:	83fb      	strh	r3, [r7, #30]
        yinc2 = -1;
 800137a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800137e:	83bb      	strh	r3, [r7, #28]
    }

    if (deltax >= deltay) {
 8001380:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001384:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001388:	429a      	cmp	r2, r3
 800138a:	db10      	blt.n	80013ae <ILI9341_DrawFilledTriangle+0xe0>
        xinc1 = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	847b      	strh	r3, [r7, #34]	; 0x22
        yinc2 = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	83bb      	strh	r3, [r7, #28]
        den = deltax;
 8001394:	8a3b      	ldrh	r3, [r7, #16]
 8001396:	837b      	strh	r3, [r7, #26]
        num = deltax / 2;
 8001398:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800139c:	0fda      	lsrs	r2, r3, #31
 800139e:	4413      	add	r3, r2
 80013a0:	105b      	asrs	r3, r3, #1
 80013a2:	833b      	strh	r3, [r7, #24]
        numadd = deltay;
 80013a4:	89fb      	ldrh	r3, [r7, #14]
 80013a6:	82fb      	strh	r3, [r7, #22]
        numpixels = deltax;
 80013a8:	8a3b      	ldrh	r3, [r7, #16]
 80013aa:	82bb      	strh	r3, [r7, #20]
 80013ac:	e00f      	b.n	80013ce <ILI9341_DrawFilledTriangle+0x100>
    }
    else {
        xinc2 = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	843b      	strh	r3, [r7, #32]
        yinc1 = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	83fb      	strh	r3, [r7, #30]
        den = deltay;
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	837b      	strh	r3, [r7, #26]
        num = deltay / 2;
 80013ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013be:	0fda      	lsrs	r2, r3, #31
 80013c0:	4413      	add	r3, r2
 80013c2:	105b      	asrs	r3, r3, #1
 80013c4:	833b      	strh	r3, [r7, #24]
        numadd = deltax;
 80013c6:	8a3b      	ldrh	r3, [r7, #16]
 80013c8:	82fb      	strh	r3, [r7, #22]
        numpixels = deltay;
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	82bb      	strh	r3, [r7, #20]
    }

    for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	827b      	strh	r3, [r7, #18]
 80013d2:	e033      	b.n	800143c <ILI9341_DrawFilledTriangle+0x16e>
        ILI9341_DrawLine(x, y, x3, y3, color);
 80013d4:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80013d6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80013d8:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 80013da:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80013dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	4623      	mov	r3, r4
 80013e4:	f7ff fd04 	bl	8000df0 <ILI9341_DrawLine>

        num += numadd;
 80013e8:	8b3a      	ldrh	r2, [r7, #24]
 80013ea:	8afb      	ldrh	r3, [r7, #22]
 80013ec:	4413      	add	r3, r2
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	833b      	strh	r3, [r7, #24]
        if (num >= den) {
 80013f2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80013f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	db0e      	blt.n	800141c <ILI9341_DrawFilledTriangle+0x14e>
            num -= den;
 80013fe:	8b3a      	ldrh	r2, [r7, #24]
 8001400:	8b7b      	ldrh	r3, [r7, #26]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	b29b      	uxth	r3, r3
 8001406:	833b      	strh	r3, [r7, #24]
            x += xinc1;
 8001408:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800140a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800140c:	4413      	add	r3, r2
 800140e:	b29b      	uxth	r3, r3
 8001410:	84fb      	strh	r3, [r7, #38]	; 0x26
            y += yinc1;
 8001412:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001414:	8bfb      	ldrh	r3, [r7, #30]
 8001416:	4413      	add	r3, r2
 8001418:	b29b      	uxth	r3, r3
 800141a:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        x += xinc2;
 800141c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800141e:	8c3b      	ldrh	r3, [r7, #32]
 8001420:	4413      	add	r3, r2
 8001422:	b29b      	uxth	r3, r3
 8001424:	84fb      	strh	r3, [r7, #38]	; 0x26
        y += yinc2;
 8001426:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001428:	8bbb      	ldrh	r3, [r7, #28]
 800142a:	4413      	add	r3, r2
 800142c:	b29b      	uxth	r3, r3
 800142e:	84bb      	strh	r3, [r7, #36]	; 0x24
    for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8001430:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001434:	b29b      	uxth	r3, r3
 8001436:	3301      	adds	r3, #1
 8001438:	b29b      	uxth	r3, r3
 800143a:	827b      	strh	r3, [r7, #18]
 800143c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001440:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001444:	429a      	cmp	r2, r3
 8001446:	ddc5      	ble.n	80013d4 <ILI9341_DrawFilledTriangle+0x106>
    }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	372c      	adds	r7, #44	; 0x2c
 800144e:	46bd      	mov	sp, r7
 8001450:	bd90      	pop	{r4, r7, pc}
	...

08001454 <ILI9341_Test>:
void ILI9341_InvertColors(bool invert) {
    ILI9341_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}

void ILI9341_Test(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af04      	add	r7, sp, #16
    ILI9341_FillScreen(ILI9341_WHITE);
 800145a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800145e:	f7ff fcb5 	bl	8000dcc <ILI9341_FillScreen>
    HAL_Delay(1000);
 8001462:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001466:	f000 fa3d 	bl	80018e4 <HAL_Delay>
    ILI9341_WriteString(10, 10, "Fuxk you shit", Font_16x26, ILI9341_RED, ILI9341_WHITE);
 800146a:	4b5c      	ldr	r3, [pc, #368]	; (80015dc <ILI9341_Test+0x188>)
 800146c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001470:	9202      	str	r2, [sp, #8]
 8001472:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001476:	9201      	str	r2, [sp, #4]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	9200      	str	r2, [sp, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a58      	ldr	r2, [pc, #352]	; (80015e0 <ILI9341_Test+0x18c>)
 8001480:	210a      	movs	r1, #10
 8001482:	200a      	movs	r0, #10
 8001484:	f7ff fc06 	bl	8000c94 <ILI9341_WriteString>
    HAL_Delay(2000);
 8001488:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800148c:	f000 fa2a 	bl	80018e4 <HAL_Delay>
    ILI9341_FillScreen(ILI9341_RED);
 8001490:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001494:	f7ff fc9a 	bl	8000dcc <ILI9341_FillScreen>
    HAL_Delay(1000);
 8001498:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800149c:	f000 fa22 	bl	80018e4 <HAL_Delay>
    ILI9341_FillScreen(ILI9341_BLUE);
 80014a0:	201f      	movs	r0, #31
 80014a2:	f7ff fc93 	bl	8000dcc <ILI9341_FillScreen>
    HAL_Delay(1000);
 80014a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014aa:	f000 fa1b 	bl	80018e4 <HAL_Delay>
    ILI9341_FillScreen(ILI9341_GREEN);
 80014ae:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80014b2:	f7ff fc8b 	bl	8000dcc <ILI9341_FillScreen>
    HAL_Delay(1000);
 80014b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ba:	f000 fa13 	bl	80018e4 <HAL_Delay>
    ILI9341_FillScreen(ILI9341_YELLOW);
 80014be:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80014c2:	f7ff fc83 	bl	8000dcc <ILI9341_FillScreen>
    HAL_Delay(1000);
 80014c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ca:	f000 fa0b 	bl	80018e4 <HAL_Delay>
    ILI9341_FillScreen(ILI9341_CYAN);
 80014ce:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80014d2:	f7ff fc7b 	bl	8000dcc <ILI9341_FillScreen>
    HAL_Delay(1000);
 80014d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014da:	f000 fa03 	bl	80018e4 <HAL_Delay>
    ILI9341_FillScreen(ILI9341_MAGENTA);
 80014de:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80014e2:	f7ff fc73 	bl	8000dcc <ILI9341_FillScreen>
    HAL_Delay(1000);
 80014e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ea:	f000 f9fb 	bl	80018e4 <HAL_Delay>
    ILI9341_FillScreen(ILI9341_BLACK);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f7ff fc6c 	bl	8000dcc <ILI9341_FillScreen>
    HAL_Delay(2000);
 80014f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014f8:	f000 f9f4 	bl	80018e4 <HAL_Delay>

    ILI9341_FillRectangle(10, 10, 30, 20, ILI9341_WHITE);
 80014fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2314      	movs	r3, #20
 8001504:	221e      	movs	r2, #30
 8001506:	210a      	movs	r1, #10
 8001508:	200a      	movs	r0, #10
 800150a:	f7ff fc0a 	bl	8000d22 <ILI9341_FillRectangle>
    HAL_Delay(1500);
 800150e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001512:	f000 f9e7 	bl	80018e4 <HAL_Delay>
    ILI9341_FillScreen(ILI9341_BLACK);
 8001516:	2000      	movs	r0, #0
 8001518:	f7ff fc58 	bl	8000dcc <ILI9341_FillScreen>

    ILI9341_DrawLine(10, 10, 30, 30, ILI9341_WHITE);
 800151c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	231e      	movs	r3, #30
 8001524:	221e      	movs	r2, #30
 8001526:	210a      	movs	r1, #10
 8001528:	200a      	movs	r0, #10
 800152a:	f7ff fc61 	bl	8000df0 <ILI9341_DrawLine>
    HAL_Delay(1500);
 800152e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001532:	f000 f9d7 	bl	80018e4 <HAL_Delay>
    ILI9341_FillScreen(ILI9341_BLACK);
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff fc48 	bl	8000dcc <ILI9341_FillScreen>

    ILI9341_DrawCircle(100, 100, 50, ILI9341_WHITE);
 800153c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001540:	2232      	movs	r2, #50	; 0x32
 8001542:	2164      	movs	r1, #100	; 0x64
 8001544:	2064      	movs	r0, #100	; 0x64
 8001546:	f7ff fcdf 	bl	8000f08 <ILI9341_DrawCircle>
    HAL_Delay(1500);
 800154a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800154e:	f000 f9c9 	bl	80018e4 <HAL_Delay>
    ILI9341_FillScreen(ILI9341_BLACK);
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff fc3a 	bl	8000dcc <ILI9341_FillScreen>

    ILI9341_DrawFilledCircle(100, 100, 50, ILI9341_WHITE);
 8001558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800155c:	2232      	movs	r2, #50	; 0x32
 800155e:	2164      	movs	r1, #100	; 0x64
 8001560:	2064      	movs	r0, #100	; 0x64
 8001562:	f7ff fdab 	bl	80010bc <ILI9341_DrawFilledCircle>
    HAL_Delay(1500);
 8001566:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800156a:	f000 f9bb 	bl	80018e4 <HAL_Delay>
    ILI9341_FillScreen(ILI9341_BLACK);
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff fc2c 	bl	8000dcc <ILI9341_FillScreen>

    ILI9341_DrawTriangle(10, 10, 50, 50, 100, 10, ILI9341_WHITE);
 8001574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001578:	9302      	str	r3, [sp, #8]
 800157a:	230a      	movs	r3, #10
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	2364      	movs	r3, #100	; 0x64
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	2332      	movs	r3, #50	; 0x32
 8001584:	2232      	movs	r2, #50	; 0x32
 8001586:	210a      	movs	r1, #10
 8001588:	200a      	movs	r0, #10
 800158a:	f7ff fe72 	bl	8001272 <ILI9341_DrawTriangle>
    HAL_Delay(1500);
 800158e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001592:	f000 f9a7 	bl	80018e4 <HAL_Delay>
    ILI9341_FillScreen(ILI9341_BLACK);
 8001596:	2000      	movs	r0, #0
 8001598:	f7ff fc18 	bl	8000dcc <ILI9341_FillScreen>

    ILI9341_DrawFilledTriangle(10, 10, 50, 50, 100, 10, ILI9341_WHITE);
 800159c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015a0:	9302      	str	r3, [sp, #8]
 80015a2:	230a      	movs	r3, #10
 80015a4:	9301      	str	r3, [sp, #4]
 80015a6:	2364      	movs	r3, #100	; 0x64
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2332      	movs	r3, #50	; 0x32
 80015ac:	2232      	movs	r2, #50	; 0x32
 80015ae:	210a      	movs	r1, #10
 80015b0:	200a      	movs	r0, #10
 80015b2:	f7ff fe8c 	bl	80012ce <ILI9341_DrawFilledTriangle>
    HAL_Delay(1500);
 80015b6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80015ba:	f000 f993 	bl	80018e4 <HAL_Delay>
    ILI9341_FillScreen(ILI9341_WHITE);
 80015be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015c2:	f7ff fc03 	bl	8000dcc <ILI9341_FillScreen>
    HAL_Delay(1000);
 80015c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ca:	f000 f98b 	bl	80018e4 <HAL_Delay>
//    ILI9341_DrawImage(70, 57, 250, 182, (const uint16_t*)image);
    HAL_Delay(1000);
 80015ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015d2:	f000 f987 	bl	80018e4 <HAL_Delay>

}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000000 	.word	0x20000000
 80015e0:	08002a4c 	.word	0x08002a4c

080015e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e8:	f000 f90a 	bl	8001800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ec:	f000 f80a 	bl	8001604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f0:	f7ff f830 	bl	8000654 <MX_GPIO_Init>
  MX_FSMC_Init();
 80015f4:	f7fe ff66 	bl	80004c4 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 80015f8:	f7ff f980 	bl	80008fc <ILI9341_Init>
  ILI9341_Test();
 80015fc:	f7ff ff2a 	bl	8001454 <ILI9341_Test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001600:	e7fe      	b.n	8001600 <main+0x1c>
	...

08001604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b094      	sub	sp, #80	; 0x50
 8001608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160a:	f107 0320 	add.w	r3, r7, #32
 800160e:	2230      	movs	r2, #48	; 0x30
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f001 f9aa 	bl	800296c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <SystemClock_Config+0xcc>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	4a27      	ldr	r2, [pc, #156]	; (80016d0 <SystemClock_Config+0xcc>)
 8001632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001636:	6413      	str	r3, [r2, #64]	; 0x40
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <SystemClock_Config+0xcc>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001644:	2300      	movs	r3, #0
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <SystemClock_Config+0xd0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a21      	ldr	r2, [pc, #132]	; (80016d4 <SystemClock_Config+0xd0>)
 800164e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <SystemClock_Config+0xd0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001660:	2301      	movs	r3, #1
 8001662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166a:	2302      	movs	r3, #2
 800166c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800166e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001674:	2304      	movs	r3, #4
 8001676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001678:	23a8      	movs	r3, #168	; 0xa8
 800167a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800167c:	2302      	movs	r3, #2
 800167e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001680:	2304      	movs	r3, #4
 8001682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001684:	f107 0320 	add.w	r3, r7, #32
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fbeb 	bl	8001e64 <HAL_RCC_OscConfig>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001694:	f000 f820 	bl	80016d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001698:	230f      	movs	r3, #15
 800169a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800169c:	2302      	movs	r3, #2
 800169e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	2105      	movs	r1, #5
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fe4c 	bl	8002354 <HAL_RCC_ClockConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016c2:	f000 f809 	bl	80016d8 <Error_Handler>
  }
}
 80016c6:	bf00      	nop
 80016c8:	3750      	adds	r7, #80	; 0x50
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40007000 	.word	0x40007000

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <Error_Handler+0x8>
	...

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_MspInit+0x4c>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <HAL_MspInit+0x4c>)
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f8:	6453      	str	r3, [r2, #68]	; 0x44
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_MspInit+0x4c>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_MspInit+0x4c>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a08      	ldr	r2, [pc, #32]	; (8001730 <HAL_MspInit+0x4c>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_MspInit+0x4c>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <NMI_Handler+0x4>

0800173a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <MemManage_Handler+0x4>

08001746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <UsageFault_Handler+0x4>

08001752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001780:	f000 f890 	bl	80018a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <SystemInit+0x20>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001792:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <SystemInit+0x20>)
 8001794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b0:	480d      	ldr	r0, [pc, #52]	; (80017e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017b2:	490e      	ldr	r1, [pc, #56]	; (80017ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017b4:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b8:	e002      	b.n	80017c0 <LoopCopyDataInit>

080017ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017be:	3304      	adds	r3, #4

080017c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c4:	d3f9      	bcc.n	80017ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c6:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017c8:	4c0b      	ldr	r4, [pc, #44]	; (80017f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017cc:	e001      	b.n	80017d2 <LoopFillZerobss>

080017ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d0:	3204      	adds	r2, #4

080017d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d4:	d3fb      	bcc.n	80017ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017d6:	f7ff ffd7 	bl	8001788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017da:	f001 f8cf 	bl	800297c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017de:	f7ff ff01 	bl	80015e4 <main>
  bx  lr    
 80017e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80017f0:	08003ddc 	.word	0x08003ddc
  ldr r2, =_sbss
 80017f4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80017f8:	20000088 	.word	0x20000088

080017fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC_IRQHandler>
	...

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_Init+0x40>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0d      	ldr	r2, [pc, #52]	; (8001840 <HAL_Init+0x40>)
 800180a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_Init+0x40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_Init+0x40>)
 8001816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800181a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a07      	ldr	r2, [pc, #28]	; (8001840 <HAL_Init+0x40>)
 8001822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001828:	2003      	movs	r0, #3
 800182a:	f000 f931 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182e:	200f      	movs	r0, #15
 8001830:	f000 f808 	bl	8001844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001834:	f7ff ff56 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023c00 	.word	0x40023c00

08001844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_InitTick+0x54>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_InitTick+0x58>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4619      	mov	r1, r3
 8001856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185a:	fbb3 f3f1 	udiv	r3, r3, r1
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f93b 	bl	8001ade <HAL_SYSTICK_Config>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e00e      	b.n	8001890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d80a      	bhi.n	800188e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001878:	2200      	movs	r2, #0
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001880:	f000 f911 	bl	8001aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001884:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <HAL_InitTick+0x5c>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e000      	b.n	8001890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000008 	.word	0x20000008
 800189c:	20000010 	.word	0x20000010
 80018a0:	2000000c 	.word	0x2000000c

080018a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_IncTick+0x20>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x24>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <HAL_IncTick+0x24>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000010 	.word	0x20000010
 80018c8:	20000084 	.word	0x20000084

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_GetTick+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000084 	.word	0x20000084

080018e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff ffee 	bl	80018cc <HAL_GetTick>
 80018f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018fc:	d005      	beq.n	800190a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_Delay+0x44>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800190a:	bf00      	nop
 800190c:	f7ff ffde 	bl	80018cc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8f7      	bhi.n	800190c <HAL_Delay+0x28>
  {
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000010 	.word	0x20000010

0800192c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001948:	4013      	ands	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195e:	4a04      	ldr	r2, [pc, #16]	; (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	60d3      	str	r3, [r2, #12]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <__NVIC_GetPriorityGrouping+0x18>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f003 0307 	and.w	r3, r3, #7
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	db0a      	blt.n	80019ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	490c      	ldr	r1, [pc, #48]	; (80019dc <__NVIC_SetPriority+0x4c>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	0112      	lsls	r2, r2, #4
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	440b      	add	r3, r1
 80019b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b8:	e00a      	b.n	80019d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4908      	ldr	r1, [pc, #32]	; (80019e0 <__NVIC_SetPriority+0x50>)
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	3b04      	subs	r3, #4
 80019c8:	0112      	lsls	r2, r2, #4
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	440b      	add	r3, r1
 80019ce:	761a      	strb	r2, [r3, #24]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000e100 	.word	0xe000e100
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	; 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f1c3 0307 	rsb	r3, r3, #7
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	bf28      	it	cs
 8001a02:	2304      	movcs	r3, #4
 8001a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d902      	bls.n	8001a14 <NVIC_EncodePriority+0x30>
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3b03      	subs	r3, #3
 8001a12:	e000      	b.n	8001a16 <NVIC_EncodePriority+0x32>
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	401a      	ands	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	43d9      	mvns	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	4313      	orrs	r3, r2
         );
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3724      	adds	r7, #36	; 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a5c:	d301      	bcc.n	8001a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00f      	b.n	8001a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <SysTick_Config+0x40>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a70:	f7ff ff8e 	bl	8001990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <SysTick_Config+0x40>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7a:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <SysTick_Config+0x40>)
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	e000e010 	.word	0xe000e010

08001a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff47 	bl	800192c <__NVIC_SetPriorityGrouping>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab8:	f7ff ff5c 	bl	8001974 <__NVIC_GetPriorityGrouping>
 8001abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7ff ff8e 	bl	80019e4 <NVIC_EncodePriority>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff5d 	bl	8001990 <__NVIC_SetPriority>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ffb0 	bl	8001a4c <SysTick_Config>
 8001aec:	4603      	mov	r3, r0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	e16b      	b.n	8001dec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b14:	2201      	movs	r2, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	f040 815a 	bne.w	8001de6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d005      	beq.n	8001b4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d130      	bne.n	8001bac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	2203      	movs	r2, #3
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b80:	2201      	movs	r2, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	f003 0201 	and.w	r2, r3, #1
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d017      	beq.n	8001be8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d123      	bne.n	8001c3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	08da      	lsrs	r2, r3, #3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3208      	adds	r2, #8
 8001bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	220f      	movs	r2, #15
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	08da      	lsrs	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3208      	adds	r2, #8
 8001c36:	69b9      	ldr	r1, [r7, #24]
 8001c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	2203      	movs	r2, #3
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0203 	and.w	r2, r3, #3
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 80b4 	beq.w	8001de6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b60      	ldr	r3, [pc, #384]	; (8001e04 <HAL_GPIO_Init+0x30c>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	4a5f      	ldr	r2, [pc, #380]	; (8001e04 <HAL_GPIO_Init+0x30c>)
 8001c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8e:	4b5d      	ldr	r3, [pc, #372]	; (8001e04 <HAL_GPIO_Init+0x30c>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c9a:	4a5b      	ldr	r2, [pc, #364]	; (8001e08 <HAL_GPIO_Init+0x310>)
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <HAL_GPIO_Init+0x314>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d02b      	beq.n	8001d1e <HAL_GPIO_Init+0x226>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a51      	ldr	r2, [pc, #324]	; (8001e10 <HAL_GPIO_Init+0x318>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d025      	beq.n	8001d1a <HAL_GPIO_Init+0x222>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a50      	ldr	r2, [pc, #320]	; (8001e14 <HAL_GPIO_Init+0x31c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d01f      	beq.n	8001d16 <HAL_GPIO_Init+0x21e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4f      	ldr	r2, [pc, #316]	; (8001e18 <HAL_GPIO_Init+0x320>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d019      	beq.n	8001d12 <HAL_GPIO_Init+0x21a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4e      	ldr	r2, [pc, #312]	; (8001e1c <HAL_GPIO_Init+0x324>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d013      	beq.n	8001d0e <HAL_GPIO_Init+0x216>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4d      	ldr	r2, [pc, #308]	; (8001e20 <HAL_GPIO_Init+0x328>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00d      	beq.n	8001d0a <HAL_GPIO_Init+0x212>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4c      	ldr	r2, [pc, #304]	; (8001e24 <HAL_GPIO_Init+0x32c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d007      	beq.n	8001d06 <HAL_GPIO_Init+0x20e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4b      	ldr	r2, [pc, #300]	; (8001e28 <HAL_GPIO_Init+0x330>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d101      	bne.n	8001d02 <HAL_GPIO_Init+0x20a>
 8001cfe:	2307      	movs	r3, #7
 8001d00:	e00e      	b.n	8001d20 <HAL_GPIO_Init+0x228>
 8001d02:	2308      	movs	r3, #8
 8001d04:	e00c      	b.n	8001d20 <HAL_GPIO_Init+0x228>
 8001d06:	2306      	movs	r3, #6
 8001d08:	e00a      	b.n	8001d20 <HAL_GPIO_Init+0x228>
 8001d0a:	2305      	movs	r3, #5
 8001d0c:	e008      	b.n	8001d20 <HAL_GPIO_Init+0x228>
 8001d0e:	2304      	movs	r3, #4
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x228>
 8001d12:	2303      	movs	r3, #3
 8001d14:	e004      	b.n	8001d20 <HAL_GPIO_Init+0x228>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e002      	b.n	8001d20 <HAL_GPIO_Init+0x228>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <HAL_GPIO_Init+0x228>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	f002 0203 	and.w	r2, r2, #3
 8001d26:	0092      	lsls	r2, r2, #2
 8001d28:	4093      	lsls	r3, r2
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d30:	4935      	ldr	r1, [pc, #212]	; (8001e08 <HAL_GPIO_Init+0x310>)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	3302      	adds	r3, #2
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d3e:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <HAL_GPIO_Init+0x334>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d62:	4a32      	ldr	r2, [pc, #200]	; (8001e2c <HAL_GPIO_Init+0x334>)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d68:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <HAL_GPIO_Init+0x334>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d8c:	4a27      	ldr	r2, [pc, #156]	; (8001e2c <HAL_GPIO_Init+0x334>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d92:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <HAL_GPIO_Init+0x334>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001db6:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <HAL_GPIO_Init+0x334>)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <HAL_GPIO_Init+0x334>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de0:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <HAL_GPIO_Init+0x334>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3301      	adds	r3, #1
 8001dea:	61fb      	str	r3, [r7, #28]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	2b0f      	cmp	r3, #15
 8001df0:	f67f ae90 	bls.w	8001b14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40013800 	.word	0x40013800
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	40020400 	.word	0x40020400
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020c00 	.word	0x40020c00
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40021400 	.word	0x40021400
 8001e24:	40021800 	.word	0x40021800
 8001e28:	40021c00 	.word	0x40021c00
 8001e2c:	40013c00 	.word	0x40013c00

08001e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e40:	787b      	ldrb	r3, [r7, #1]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e46:	887a      	ldrh	r2, [r7, #2]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e4c:	e003      	b.n	8001e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e4e:	887b      	ldrh	r3, [r7, #2]
 8001e50:	041a      	lsls	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	619a      	str	r2, [r3, #24]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e267      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d075      	beq.n	8001f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e82:	4b88      	ldr	r3, [pc, #544]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d00c      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8e:	4b85      	ldr	r3, [pc, #532]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d112      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9a:	4b82      	ldr	r3, [pc, #520]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	4b7e      	ldr	r3, [pc, #504]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d05b      	beq.n	8001f6c <HAL_RCC_OscConfig+0x108>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d157      	bne.n	8001f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e242      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec8:	d106      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x74>
 8001eca:	4b76      	ldr	r3, [pc, #472]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a75      	ldr	r2, [pc, #468]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e01d      	b.n	8001f14 <HAL_RCC_OscConfig+0xb0>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0x98>
 8001ee2:	4b70      	ldr	r3, [pc, #448]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a6f      	ldr	r2, [pc, #444]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b6d      	ldr	r3, [pc, #436]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a6c      	ldr	r2, [pc, #432]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e00b      	b.n	8001f14 <HAL_RCC_OscConfig+0xb0>
 8001efc:	4b69      	ldr	r3, [pc, #420]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a68      	ldr	r2, [pc, #416]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	4b66      	ldr	r3, [pc, #408]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a65      	ldr	r2, [pc, #404]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fcd6 	bl	80018cc <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff fcd2 	bl	80018cc <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	; 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e207      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	4b5b      	ldr	r3, [pc, #364]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0xc0>
 8001f42:	e014      	b.n	8001f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7ff fcc2 	bl	80018cc <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7ff fcbe 	bl	80018cc <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	; 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e1f3      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	4b51      	ldr	r3, [pc, #324]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0xe8>
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d063      	beq.n	8002042 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00b      	beq.n	8001f9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f86:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d11c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f92:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d116      	bne.n	8001fcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9e:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x152>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e1c7      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4937      	ldr	r1, [pc, #220]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fca:	e03a      	b.n	8002042 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d020      	beq.n	8002016 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd4:	4b34      	ldr	r3, [pc, #208]	; (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7ff fc77 	bl	80018cc <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe2:	f7ff fc73 	bl	80018cc <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e1a8      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002000:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4925      	ldr	r1, [pc, #148]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
 8002014:	e015      	b.n	8002042 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002016:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_RCC_OscConfig+0x244>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff fc56 	bl	80018cc <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002024:	f7ff fc52 	bl	80018cc <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e187      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d036      	beq.n	80020bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d016      	beq.n	8002084 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <HAL_RCC_OscConfig+0x248>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7ff fc36 	bl	80018cc <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002064:	f7ff fc32 	bl	80018cc <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e167      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8002078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x200>
 8002082:	e01b      	b.n	80020bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002084:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_RCC_OscConfig+0x248>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208a:	f7ff fc1f 	bl	80018cc <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002090:	e00e      	b.n	80020b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002092:	f7ff fc1b 	bl	80018cc <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d907      	bls.n	80020b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e150      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
 80020a4:	40023800 	.word	0x40023800
 80020a8:	42470000 	.word	0x42470000
 80020ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b0:	4b88      	ldr	r3, [pc, #544]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1ea      	bne.n	8002092 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 8097 	beq.w	80021f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ce:	4b81      	ldr	r3, [pc, #516]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10f      	bne.n	80020fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	4b7d      	ldr	r3, [pc, #500]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a7c      	ldr	r2, [pc, #496]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b7a      	ldr	r3, [pc, #488]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f6:	2301      	movs	r3, #1
 80020f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	4b77      	ldr	r3, [pc, #476]	; (80022d8 <HAL_RCC_OscConfig+0x474>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d118      	bne.n	8002138 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002106:	4b74      	ldr	r3, [pc, #464]	; (80022d8 <HAL_RCC_OscConfig+0x474>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a73      	ldr	r2, [pc, #460]	; (80022d8 <HAL_RCC_OscConfig+0x474>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002112:	f7ff fbdb 	bl	80018cc <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211a:	f7ff fbd7 	bl	80018cc <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e10c      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	4b6a      	ldr	r3, [pc, #424]	; (80022d8 <HAL_RCC_OscConfig+0x474>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x2ea>
 8002140:	4b64      	ldr	r3, [pc, #400]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002144:	4a63      	ldr	r2, [pc, #396]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6713      	str	r3, [r2, #112]	; 0x70
 800214c:	e01c      	b.n	8002188 <HAL_RCC_OscConfig+0x324>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b05      	cmp	r3, #5
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x30c>
 8002156:	4b5f      	ldr	r3, [pc, #380]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	4a5e      	ldr	r2, [pc, #376]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	6713      	str	r3, [r2, #112]	; 0x70
 8002162:	4b5c      	ldr	r3, [pc, #368]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002166:	4a5b      	ldr	r2, [pc, #364]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6713      	str	r3, [r2, #112]	; 0x70
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0x324>
 8002170:	4b58      	ldr	r3, [pc, #352]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	4a57      	ldr	r2, [pc, #348]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	6713      	str	r3, [r2, #112]	; 0x70
 800217c:	4b55      	ldr	r3, [pc, #340]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4a54      	ldr	r2, [pc, #336]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002182:	f023 0304 	bic.w	r3, r3, #4
 8002186:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d015      	beq.n	80021bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7ff fb9c 	bl	80018cc <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002196:	e00a      	b.n	80021ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7ff fb98 	bl	80018cc <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e0cb      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ae:	4b49      	ldr	r3, [pc, #292]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0ee      	beq.n	8002198 <HAL_RCC_OscConfig+0x334>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021bc:	f7ff fb86 	bl	80018cc <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c2:	e00a      	b.n	80021da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c4:	f7ff fb82 	bl	80018cc <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e0b5      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021da:	4b3e      	ldr	r3, [pc, #248]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1ee      	bne.n	80021c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	4a38      	ldr	r2, [pc, #224]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80021f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80a1 	beq.w	8002344 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002202:	4b34      	ldr	r3, [pc, #208]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b08      	cmp	r3, #8
 800220c:	d05c      	beq.n	80022c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d141      	bne.n	800229a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	4b31      	ldr	r3, [pc, #196]	; (80022dc <HAL_RCC_OscConfig+0x478>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7ff fb56 	bl	80018cc <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002224:	f7ff fb52 	bl	80018cc <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e087      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	019b      	lsls	r3, r3, #6
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	085b      	lsrs	r3, r3, #1
 800225a:	3b01      	subs	r3, #1
 800225c:	041b      	lsls	r3, r3, #16
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	491b      	ldr	r1, [pc, #108]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_RCC_OscConfig+0x478>)
 800226e:	2201      	movs	r2, #1
 8002270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002272:	f7ff fb2b 	bl	80018cc <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227a:	f7ff fb27 	bl	80018cc <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e05c      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x416>
 8002298:	e054      	b.n	8002344 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_RCC_OscConfig+0x478>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7ff fb14 	bl	80018cc <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a8:	f7ff fb10 	bl	80018cc <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e045      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x444>
 80022c6:	e03d      	b.n	8002344 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e038      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40007000 	.word	0x40007000
 80022dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_RCC_OscConfig+0x4ec>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d028      	beq.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d121      	bne.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d11a      	bne.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002310:	4013      	ands	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002318:	4293      	cmp	r3, r2
 800231a:	d111      	bne.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002326:	085b      	lsrs	r3, r3, #1
 8002328:	3b01      	subs	r3, #1
 800232a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d107      	bne.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800

08002354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0cc      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002368:	4b68      	ldr	r3, [pc, #416]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d90c      	bls.n	8002390 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b65      	ldr	r3, [pc, #404]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b63      	ldr	r3, [pc, #396]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0b8      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d020      	beq.n	80023de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a8:	4b59      	ldr	r3, [pc, #356]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4a58      	ldr	r2, [pc, #352]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c0:	4b53      	ldr	r3, [pc, #332]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4a52      	ldr	r2, [pc, #328]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023cc:	4b50      	ldr	r3, [pc, #320]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	494d      	ldr	r1, [pc, #308]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d044      	beq.n	8002474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	4b47      	ldr	r3, [pc, #284]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d119      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e07f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d003      	beq.n	8002412 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800240e:	2b03      	cmp	r3, #3
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002412:	4b3f      	ldr	r3, [pc, #252]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e06f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002422:	4b3b      	ldr	r3, [pc, #236]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e067      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002432:	4b37      	ldr	r3, [pc, #220]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f023 0203 	bic.w	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4934      	ldr	r1, [pc, #208]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	4313      	orrs	r3, r2
 8002442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002444:	f7ff fa42 	bl	80018cc <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	e00a      	b.n	8002462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244c:	f7ff fa3e 	bl	80018cc <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	; 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e04f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	4b2b      	ldr	r3, [pc, #172]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 020c 	and.w	r2, r3, #12
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	429a      	cmp	r2, r3
 8002472:	d1eb      	bne.n	800244c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002474:	4b25      	ldr	r3, [pc, #148]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d20c      	bcs.n	800249c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4b22      	ldr	r3, [pc, #136]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e032      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4916      	ldr	r1, [pc, #88]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d009      	beq.n	80024da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	490e      	ldr	r1, [pc, #56]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024da:	f000 f821 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 80024de:	4602      	mov	r2, r0
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	490a      	ldr	r1, [pc, #40]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	5ccb      	ldrb	r3, [r1, r3]
 80024ee:	fa22 f303 	lsr.w	r3, r2, r3
 80024f2:	4a09      	ldr	r2, [pc, #36]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff f9a2 	bl	8001844 <HAL_InitTick>

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023c00 	.word	0x40023c00
 8002510:	40023800 	.word	0x40023800
 8002514:	08003dbc 	.word	0x08003dbc
 8002518:	20000008 	.word	0x20000008
 800251c:	2000000c 	.word	0x2000000c

08002520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002524:	b094      	sub	sp, #80	; 0x50
 8002526:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	647b      	str	r3, [r7, #68]	; 0x44
 800252c:	2300      	movs	r3, #0
 800252e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002530:	2300      	movs	r3, #0
 8002532:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002538:	4b79      	ldr	r3, [pc, #484]	; (8002720 <HAL_RCC_GetSysClockFreq+0x200>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b08      	cmp	r3, #8
 8002542:	d00d      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x40>
 8002544:	2b08      	cmp	r3, #8
 8002546:	f200 80e1 	bhi.w	800270c <HAL_RCC_GetSysClockFreq+0x1ec>
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x34>
 800254e:	2b04      	cmp	r3, #4
 8002550:	d003      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x3a>
 8002552:	e0db      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002554:	4b73      	ldr	r3, [pc, #460]	; (8002724 <HAL_RCC_GetSysClockFreq+0x204>)
 8002556:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002558:	e0db      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800255a:	4b73      	ldr	r3, [pc, #460]	; (8002728 <HAL_RCC_GetSysClockFreq+0x208>)
 800255c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800255e:	e0d8      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002560:	4b6f      	ldr	r3, [pc, #444]	; (8002720 <HAL_RCC_GetSysClockFreq+0x200>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002568:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800256a:	4b6d      	ldr	r3, [pc, #436]	; (8002720 <HAL_RCC_GetSysClockFreq+0x200>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d063      	beq.n	800263e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002576:	4b6a      	ldr	r3, [pc, #424]	; (8002720 <HAL_RCC_GetSysClockFreq+0x200>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	2200      	movs	r2, #0
 800257e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002580:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002588:	633b      	str	r3, [r7, #48]	; 0x30
 800258a:	2300      	movs	r3, #0
 800258c:	637b      	str	r3, [r7, #52]	; 0x34
 800258e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002592:	4622      	mov	r2, r4
 8002594:	462b      	mov	r3, r5
 8002596:	f04f 0000 	mov.w	r0, #0
 800259a:	f04f 0100 	mov.w	r1, #0
 800259e:	0159      	lsls	r1, r3, #5
 80025a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025a4:	0150      	lsls	r0, r2, #5
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4621      	mov	r1, r4
 80025ac:	1a51      	subs	r1, r2, r1
 80025ae:	6139      	str	r1, [r7, #16]
 80025b0:	4629      	mov	r1, r5
 80025b2:	eb63 0301 	sbc.w	r3, r3, r1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025c4:	4659      	mov	r1, fp
 80025c6:	018b      	lsls	r3, r1, #6
 80025c8:	4651      	mov	r1, sl
 80025ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ce:	4651      	mov	r1, sl
 80025d0:	018a      	lsls	r2, r1, #6
 80025d2:	4651      	mov	r1, sl
 80025d4:	ebb2 0801 	subs.w	r8, r2, r1
 80025d8:	4659      	mov	r1, fp
 80025da:	eb63 0901 	sbc.w	r9, r3, r1
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025f2:	4690      	mov	r8, r2
 80025f4:	4699      	mov	r9, r3
 80025f6:	4623      	mov	r3, r4
 80025f8:	eb18 0303 	adds.w	r3, r8, r3
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	462b      	mov	r3, r5
 8002600:	eb49 0303 	adc.w	r3, r9, r3
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002612:	4629      	mov	r1, r5
 8002614:	024b      	lsls	r3, r1, #9
 8002616:	4621      	mov	r1, r4
 8002618:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800261c:	4621      	mov	r1, r4
 800261e:	024a      	lsls	r2, r1, #9
 8002620:	4610      	mov	r0, r2
 8002622:	4619      	mov	r1, r3
 8002624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002626:	2200      	movs	r2, #0
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
 800262a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800262c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002630:	f7fd fdca 	bl	80001c8 <__aeabi_uldivmod>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4613      	mov	r3, r2
 800263a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800263c:	e058      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263e:	4b38      	ldr	r3, [pc, #224]	; (8002720 <HAL_RCC_GetSysClockFreq+0x200>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	099b      	lsrs	r3, r3, #6
 8002644:	2200      	movs	r2, #0
 8002646:	4618      	mov	r0, r3
 8002648:	4611      	mov	r1, r2
 800264a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800264e:	623b      	str	r3, [r7, #32]
 8002650:	2300      	movs	r3, #0
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
 8002654:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002658:	4642      	mov	r2, r8
 800265a:	464b      	mov	r3, r9
 800265c:	f04f 0000 	mov.w	r0, #0
 8002660:	f04f 0100 	mov.w	r1, #0
 8002664:	0159      	lsls	r1, r3, #5
 8002666:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800266a:	0150      	lsls	r0, r2, #5
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4641      	mov	r1, r8
 8002672:	ebb2 0a01 	subs.w	sl, r2, r1
 8002676:	4649      	mov	r1, r9
 8002678:	eb63 0b01 	sbc.w	fp, r3, r1
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002688:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800268c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002690:	ebb2 040a 	subs.w	r4, r2, sl
 8002694:	eb63 050b 	sbc.w	r5, r3, fp
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	00eb      	lsls	r3, r5, #3
 80026a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026a6:	00e2      	lsls	r2, r4, #3
 80026a8:	4614      	mov	r4, r2
 80026aa:	461d      	mov	r5, r3
 80026ac:	4643      	mov	r3, r8
 80026ae:	18e3      	adds	r3, r4, r3
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	464b      	mov	r3, r9
 80026b4:	eb45 0303 	adc.w	r3, r5, r3
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026c6:	4629      	mov	r1, r5
 80026c8:	028b      	lsls	r3, r1, #10
 80026ca:	4621      	mov	r1, r4
 80026cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026d0:	4621      	mov	r1, r4
 80026d2:	028a      	lsls	r2, r1, #10
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026da:	2200      	movs	r2, #0
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	61fa      	str	r2, [r7, #28]
 80026e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026e4:	f7fd fd70 	bl	80001c8 <__aeabi_uldivmod>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4613      	mov	r3, r2
 80026ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	0c1b      	lsrs	r3, r3, #16
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	3301      	adds	r3, #1
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002700:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002704:	fbb2 f3f3 	udiv	r3, r2, r3
 8002708:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800270a:	e002      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_RCC_GetSysClockFreq+0x204>)
 800270e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002714:	4618      	mov	r0, r3
 8002716:	3750      	adds	r7, #80	; 0x50
 8002718:	46bd      	mov	sp, r7
 800271a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800
 8002724:	00f42400 	.word	0x00f42400
 8002728:	007a1200 	.word	0x007a1200

0800272c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e038      	b.n	80027b4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7fd ff72 	bl	8000640 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3308      	adds	r3, #8
 8002764:	4619      	mov	r1, r3
 8002766:	4610      	mov	r0, r2
 8002768:	f000 f828 	bl	80027bc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	461a      	mov	r2, r3
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	f000 f88a 	bl	8002890 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6858      	ldr	r0, [r3, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	f000 f8b7 	bl	80028fc <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	6892      	ldr	r2, [r2, #8]
 8002796:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	6892      	ldr	r2, [r2, #8]
 80027a2:	f041 0101 	orr.w	r1, r1, #1
 80027a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	f023 0101 	bic.w	r1, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d102      	bne.n	80027ec <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80027e6:	2340      	movs	r3, #64	; 0x40
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	e001      	b.n	80027f0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80027fc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8002802:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002808:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800280e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002814:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800281a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002820:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8002826:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800282c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <FSMC_NORSRAM_Init+0xd0>)
 800284c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002854:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800285c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43db      	mvns	r3, r3
 800286c:	ea02 0103 	and.w	r1, r2, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4319      	orrs	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	371c      	adds	r7, #28
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	0008fb7f 	.word	0x0008fb7f

08002890 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	431a      	orrs	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	431a      	orrs	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	041b      	lsls	r3, r3, #16
 80028c4:	431a      	orrs	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	051b      	lsls	r3, r3, #20
 80028ce:	431a      	orrs	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	3b02      	subs	r3, #2
 80028d6:	061b      	lsls	r3, r3, #24
 80028d8:	431a      	orrs	r2, r3
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	3201      	adds	r2, #1
 80028e4:	4319      	orrs	r1, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002910:	d11d      	bne.n	800294e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800291c:	4013      	ands	r3, r2
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	6811      	ldr	r1, [r2, #0]
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	6852      	ldr	r2, [r2, #4]
 8002926:	0112      	lsls	r2, r2, #4
 8002928:	4311      	orrs	r1, r2
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	6892      	ldr	r2, [r2, #8]
 800292e:	0212      	lsls	r2, r2, #8
 8002930:	4311      	orrs	r1, r2
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	6992      	ldr	r2, [r2, #24]
 8002936:	4311      	orrs	r1, r2
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	68d2      	ldr	r2, [r2, #12]
 800293c:	0412      	lsls	r2, r2, #16
 800293e:	430a      	orrs	r2, r1
 8002940:	ea43 0102 	orr.w	r1, r3, r2
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800294c:	e005      	b.n	800295a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	cff00000 	.word	0xcff00000

0800296c <memset>:
 800296c:	4402      	add	r2, r0
 800296e:	4603      	mov	r3, r0
 8002970:	4293      	cmp	r3, r2
 8002972:	d100      	bne.n	8002976 <memset+0xa>
 8002974:	4770      	bx	lr
 8002976:	f803 1b01 	strb.w	r1, [r3], #1
 800297a:	e7f9      	b.n	8002970 <memset+0x4>

0800297c <__libc_init_array>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	4d0d      	ldr	r5, [pc, #52]	; (80029b4 <__libc_init_array+0x38>)
 8002980:	4c0d      	ldr	r4, [pc, #52]	; (80029b8 <__libc_init_array+0x3c>)
 8002982:	1b64      	subs	r4, r4, r5
 8002984:	10a4      	asrs	r4, r4, #2
 8002986:	2600      	movs	r6, #0
 8002988:	42a6      	cmp	r6, r4
 800298a:	d109      	bne.n	80029a0 <__libc_init_array+0x24>
 800298c:	4d0b      	ldr	r5, [pc, #44]	; (80029bc <__libc_init_array+0x40>)
 800298e:	4c0c      	ldr	r4, [pc, #48]	; (80029c0 <__libc_init_array+0x44>)
 8002990:	f000 f818 	bl	80029c4 <_init>
 8002994:	1b64      	subs	r4, r4, r5
 8002996:	10a4      	asrs	r4, r4, #2
 8002998:	2600      	movs	r6, #0
 800299a:	42a6      	cmp	r6, r4
 800299c:	d105      	bne.n	80029aa <__libc_init_array+0x2e>
 800299e:	bd70      	pop	{r4, r5, r6, pc}
 80029a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a4:	4798      	blx	r3
 80029a6:	3601      	adds	r6, #1
 80029a8:	e7ee      	b.n	8002988 <__libc_init_array+0xc>
 80029aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ae:	4798      	blx	r3
 80029b0:	3601      	adds	r6, #1
 80029b2:	e7f2      	b.n	800299a <__libc_init_array+0x1e>
 80029b4:	08003dd4 	.word	0x08003dd4
 80029b8:	08003dd4 	.word	0x08003dd4
 80029bc:	08003dd4 	.word	0x08003dd4
 80029c0:	08003dd8 	.word	0x08003dd8

080029c4 <_init>:
 80029c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c6:	bf00      	nop
 80029c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ca:	bc08      	pop	{r3}
 80029cc:	469e      	mov	lr, r3
 80029ce:	4770      	bx	lr

080029d0 <_fini>:
 80029d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d2:	bf00      	nop
 80029d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d6:	bc08      	pop	{r3}
 80029d8:	469e      	mov	lr, r3
 80029da:	4770      	bx	lr
